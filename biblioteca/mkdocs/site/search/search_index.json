{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Tron/","title":"tron","text":""},{"location":"Tron/1-LEGOS/0-ORGANIZACION/TODO/","title":"TODO:","text":"<p>Generar el dialogo triple con GTK buscar en la sesion web guardada</p> <p>luego realizar en sesiones libcursos la programacion de las dos interfaces por separado, la de marcar y la de ir a video.</p>"},{"location":"Tron/1-LEGOS/0-ORGANIZACION/TODO/#todo-sacar-las-funciones-de-control-de-proceso-aparte-en-sesioneslibcursossh","title":"TODO sacar las funciones de control de proceso aparte en \"$sesiones/libcursos.sh\"","text":""},{"location":"Tron/1-LEGOS/Bash/interfaces-bash/easy/","title":"EasyBashGUI","text":"<p>Fuente:https://github.com/BashGui/easybashgui</p> <p>EasyBashGUI es una biblioteca de funciones Bash para *BSD y GNU/Linux que tiene como objetivo brindar funciones GUI simples usando yad, gtkdialog, kdialog, zenity, Xdialog, \u00a9dialog, whiptail o bash incorporados dependiendo de si KDE o GNOME se est\u00e1n ejecutando o no, Yad /Gtkdialog/Xdialog instalado o no y, eventualmente, el servidor X ejecut\u00e1ndose o no.</p> <p><pre><code>Proyecto EasyBashGUI.\n\n\nIntroducci\u00f3n\n\nEasyBashGUI es una biblioteca de funciones Bash compatible con Posix que tiene como objetivo brindar funciones GUI simples usando yad, gtkdialog, kdialog, zenity, Xdialog, dialog o whiptail dependiendo de KDE o GNOME en ejecuci\u00f3n o no, Yad, Gtkdialog o Xdialog instalado o no y servidor X corriendo o no ((c)di\u00e1logo o cola de l\u00e1tigo es el m\u00ednimo). Por lo tanto, si el programador bash escribe: \"mensaje 'Gracias por usar este programa'\", no tiene que preocuparse en qu\u00e9 entorno se ejecuta su programa: es suficiente con al menos (c)dialog o whiptail instalado, y el programa funcionar\u00e1 como se espera . Obviamente, si el usuario tambi\u00e9n tiene instalado KDE, GNOME o gtkdialog/Xdialog (y est\u00e1 en una sesi\u00f3n X), el programa tendr\u00e1 \"otro aspecto\", pero el flujo l\u00f3gico sigue siendo exactamente el mismo.\nPuede forzar el uso del widget a trav\u00e9s de la variable \"supermodo\" (valores posibles: \"yad\", \"gtkdialog\", \"kdialog\", \"zenity\", \"Xdialog\", \"dialog\", \"none\";\npor ejemplo: &gt;exportar supermodo=\"kdialog\" &amp;&amp; fuente easybashgui &amp;&amp; mensaje Hello ).\nNOTA sobre el modo \"ninguno\": debe asegurarse de que STDERR *no* sea redirigido, para poder ver las cajas de shell en su terminal.\n\nEn la \"suite\" de EasyBashGUI hay un iniciador (\"easybashgui\"), un iniciador que alterna algunas opciones de depuraci\u00f3n (\"easybashgui-debug\"), una biblioteca de widgets (\"easybashgui_X.X.X.lib\") y un script independiente (m\u00e1s bien antiguo hoy en d\u00eda) para crear cuadros de di\u00e1logo externamente (\"easydialog-legacy\"). Adem\u00e1s, tambi\u00e9n hay otra biblioteca (\"easybashlib\") para funciones auxiliares opcionales (gracias a ella, ya no necesita usar la funci\u00f3n \"clean_temp ()\" al final de sus scripts EBG).\n</code></pre> <pre><code>Library functions.\n\nmessage\nok_message\nalert_message\nnotify_message\ntext\nquestion\ninput\nmenu\ntagged_menu\nlist\nfselect (= \"file select\" )\ndselect (= \"directory select\" )\nwait_seconds\nwait_for\nterminate_wait_for\nprogress\nadjust\nnotify (*)\nnotify_change (*)\n\n(* =&gt; only if you have \"yad\" installed)\n</code></pre> <pre><code>How to install and use.\n\nExtract all files...\n(e.g.: &gt;tar -xzvf EasyBashGUI_X.X.X )\n\nCd in ./EasyBashGUI source dir...\n(e.g.: &gt;cd ./EasyBashGUI_X.X.X )\n\nInstall it (as root)...\n(e.g.: &gt;sudo make install )\n\nUninstall it (as root)...\n(e.g.: &gt;sudo make uninstall )\n\nThat's it !!!!!\n\n\n\nIf you want use it in your scripts, simply source \"easybashgui\" before use...\n(e.g.: \"source easybashgui\" )\n\n\nE.g.:\n-------------------\n#!/bin/bash\nsource easybashgui\n#\nmessage \"this\"\ninput 1 ( \"that\" )\nmenu \"this\" \"that\"\nlist +\"you\" -\"me\" +\"her\"\n...\netc.etc.\n...\n</code></pre> <pre><code>Synopsis.\n\nquestion -&gt; \"[text]\"                 =&gt;       ( 1 argument, box output to exit code and STDERR ) (*)\nmessage -&gt; \"[text]\"                  =&gt;       ( 1 argument )\nalert_message -&gt; \"[text]\"            =&gt;       ( 1 argument )\nok_message -&gt; \"[text]\"               =&gt;       ( 1 argument )\nnotify_message -&gt; &lt;-i \"[icon]\"&gt; \"[text]\" =&gt;   ( 1 option, 1 argument )\ntext                                 =&gt;       ( STDIN, NO argument, box output to \"${dir_tmp}/${file_tmp}\" and STDERR ) (^)\nwait_seconds -&gt; \"[integer]\"          =&gt;       ( 1 argument )\nwait_for -&gt; \"[text]\"                 =&gt;       ( 1 argument, PID to kill to \"wait_for__PID\" variable and STDERR ) (@)\nterminate_wait_for                   =&gt;       ( 1 argument only in easydialog, otherwise, NO argument ) (@)\nfselect -&gt; \"&lt;init. dir.&gt;\"            =&gt;       ( 1 &lt;optional&gt; argument, box output to \"${dir_tmp}/${file_tmp}\" and STDERR ) (#)\ndselect -&gt; \"&lt;init. dir.&gt;\"            =&gt;       ( 1 &lt;optional&gt; argument, box output to \"${dir_tmp}/${file_tmp}\" and STDERR ) (#)\ninput -&gt; 1 \"&lt;label 1&gt;\" \"[init 1]\"    =&gt;       ( 2-3 arguments, box output to \"${dir_tmp}/${file_tmp}\" and STDERR )\ninput -&gt; 2 \"[label 1]\" \"[init 1]\" \"[label 2]\" \"[init 2]\"                     =&gt; ( 5 arguments, box output to \"${dir_tmp}/${file_tmp}\" and STDERR )\ninput -&gt; 3 \"[label 1]\" \"[init 1]\" \"[label 2]\" \"[init 2]\" \"[label 3]\" \"[init 3]\" =&gt; ( 7 arguments, box output to \"${dir_tmp}/${file_tmp}\" and STDERR )\nmenu -&gt; \"[item 1]\" ... \"[item n]\"    =&gt;       ( [n] arguments, box output to \"${dir_tmp}/${file_tmp}\" and STDERR ) (%)\ntagged_menu -&gt; \"[item 1]\" \"[tag 1]\" ... \"[item n]\" \"[tag n]\"    =&gt;       ( [n*2] arguments, box output to \"${dir_tmp}/${file_tmp}\" and STDERR ) (%)\nlist -&gt; &lt;+|-&gt;\"[item 1]\" ... &lt;+|-&gt;\"[item n]\"    =&gt;       ( [n] arguments, optionally prefixed by \"+\"(plus) or \"-\"(minus), box output to \"${dir_tmp}/${file_tmp}\" and STDERR ) (%)\nprogress -&gt; \"[text]\"                         =&gt;       ( percent with or without '%' in STDIN, 1 argument )\nprogress -&gt; \"[text]\" \"[elements number]\"     =&gt;       ( \"PROGRESS\" string in STDIN, 2 arguments )\nadjust -&gt; \"[text]\" \"[min]\" \"[init]\" \"[max]\" =&gt; ( 4 arguments, box output to \"${dir_tmp}/${file_tmp}\" and STDERR )\nnotify -&gt; &lt;-c \"[click command (for mouse left button)]\"&gt; &lt;-i \"[icon_good]#[icon_bad]\"&gt; &lt;-t \"[tooltip_good]#[tooltip_bad]\"&gt; \"[menu item 1]\" \"[menu command 1]\" ... \"[menu item n]\" \"[menu command n]\"        =&gt;       ( 3 options, [n*2] mandatory arguments )\nnotify_change -&gt; &lt;-i \"[new icon]\"&gt; &lt;-t \"[new tooltip]\"&gt; \"[good|bad]\"        =&gt;      ( 2 options, 1 mandatory argument ) </code></pre> <pre><code>(*) = \"0\" el estado de salida es \"S\u00cd\", \"1\" el estado de salida es \"NO\", otros c\u00f3digos de salida que debe hacer salir del programa: normalmente en un script solo tiene que verificar el estado de salida para conocer la elecci\u00f3n del usuario;\n(^) = funci\u00f3n de texto escribe texto en STDIN en el archivo \"${dir_tmp}/${file_tmp}\" y (solo) para kdialog, zenity y Xdialog tambi\u00e9n puede editar texto para escribir;\n(@) = la funci\u00f3n \"esperar\" crea una ventana con un texto y devuelve el control al programa principal... despu\u00e9s de un trabajo, puede cerrar la ventana a trav\u00e9s de la funci\u00f3n \"terminar_esperar\" (no necesita argumento);\n(#) = tenga cuidado que si est\u00e1 en \"modo consola\" o sin X, a trav\u00e9s de cdialog, la selecci\u00f3n se hace con la tecla ESPACIO, y NO con la tecla enter: recu\u00e9rdelo;\n(%) = las funciones \"men\u00fa\" y \"lista\" difieren en cuanto a las opciones: el men\u00fa permite una sola opci\u00f3n, la lista permite m\u00faltiples opciones; desde la versi\u00f3n 7.1.0, puede usar tagged_menu (): genera etiquetas (por ejemplo: \"tagged_menu 1 A 2 B\" -&gt; si el usuario selecciona la etiqueta \"A\", la funci\u00f3n genera el elemento \"1\");\n</code></pre> <pre><code>Since EasyBashGUI v.1.2.4, all windows functions support options \"&lt;-w|-width&gt; [integer]\", and \"&lt;-h|-height&gt; [integer]\" for custom window size (note: not used for \"notify_message\"):\n</code></pre></p> <p><pre><code>Library examples:\n1)\nquestion \"Do you like Contry music ?\"\nanswer=\"${?}\"\nif [ ${answer} -eq 0 ]\nthen\nok_message \"You do like it :)\"\nelif [ ${answer} -eq 1 ]\nthen\nalert_message \"You don't like it :(\"\nelse\nok_message \"See you\"\nexit 0\nfi\n\n2)\necho -e \"What's your name?\\n\\nMy name's:\\nVittorio\" | text\n\n3)\nwait_for \"I'm sleeping 4 seconds... good night...\"\nsleep 4\nterminate_wait_for\n\n4)\nfselect\nfile=\"$(0&lt; \"${dir_tmp}/${file_tmp}\" )\"\n\n5)\ninput 1 \"(write here IP address)\"\ninput 1 \"Please, write IP address\" \"192.168.1.1\"\ninput 3 \"Username\" \"root\" \"IP address\" \"192.168.0.1\" \"Destination directory\" \"/tmp\"\nIFS=$'\\n' ; choices=( $(0&lt; \"${dir_tmp}/${file_tmp}\" ) ) ; IFS=$' \\t\\n'\nuser=\"${choices[0]}\"\nip=\"${choices[1]}\"\ndir=\"${choices[2]}\"\n\n6)\nfor i in 10 20 30 40 50 60 70 80 90 100\ndo\necho \"${i}\"\nsleep 2\ndone | progress \"This is a test progress...\"\n\n7)\nadjust \"Please, set Volume level\" 15 40 75\n\n8)\nwomen=( Angela Carla Michelle Noemi Urma Marisa Karina Anita Josephine Rachel )\nfor (( index=0 ; index &lt; ${#women[@]} ; index++ })) do\ntoday_prefered_woman=\"${women[${index}]}\"\nkiss \"${today_prefered_woman}\"\nsleep 1\n#\n# Job done !!\n# then...\necho \"PROGRESS\"\n#\ndone | progress \"This is a _LOVE_ progress...\" \"${#women[@]}\"\n# if you use \"PROGRESS\" string in STDIN do not forget second argument ( \"[elements number]\" )\n\n9)\nnotify -t \"Good tooltip:OK#Bad tooltip:BAD\" -i \"/usr/local/share/pixmaps/nm-signal-100.png#gtk-fullscreen\" \"Xclock\" \"xclock\" \"Xcalc\" \"xcalc\"\n#\nwhile :\n    do\nmenu GOOD BAD\n    answer=$(0&lt; \"${dir_tmp}/${file_tmp}\" )\n#\nif [ \"${answer}\" = \"GOOD\" ]\nthen\nnotify_message \"Changed in \\\"good\\\" ...\"\nnotify_change \"good\"\nelif [ \"${answer}\" = \"BAD\" ]\nthen\nnotify_message \"Changed in \\\"bad\\\" ...\"\nnotify_change -i \"gtk-help\" -t \"This tooltip is bad\" \"bad\"\nelse\nexit\nfi\n#\ndone\n\n\n\n\n\n( For the old \"easydialog-legacy\" examples, you would launch it simply with \"-h\" option )\n</code></pre> <pre><code>Nota sobre el modo de consola.\n\nEasyBashGUI no funciona con el \"di\u00e1logo\" original (el antiguo) que es muy limitado; si tiene la primera versi\u00f3n \"dialog\" en su caja, instale \"cdialog\" y alias o vincule \"dialog\" a cdialog. No hay problema en caso de que tenga instalado al menos \"whiptail\": desde la versi\u00f3n 4.0.0, EasyBashGUI puede usarlo en lugar de (c)dialog.\nDesde la versi\u00f3n 5.0.0, puede usar EasyBashGUI incluso si NO hay ning\u00fan WIDGET instalado (es decir: no gtkdialog, no kdialog, no zenity, no Xdialog, no (c)dialog, no whiptail... doh!!!!!). Para usar EBG \"super bare\", simplemente elimine la biblioteca \".lib\" de su ruta, o establezca var \"supermodo\" en \"ninguno\" antes de obtener el abastecimiento de easybashgui (por ejemplo: &gt;exportar supermodo=\"ninguno\" &amp;&amp; fuente easybashgui &amp;&amp; mensaje \"Hola mundo...\" )\n</code></pre> <pre><code>Nota sobre el modo gtkdialog.\n\nEasyBashGUI establece declaraciones de salida de gtkdialog como variables a trav\u00e9s de \"eval\". De esta manera, en teor\u00eda, podr\u00eda ser posiblemente peligroso; sin embargo, hasta el momento, no conozco ninguna forma alternativa...\n</code></pre></p>"},{"location":"Tron/1-LEGOS/Bash/interfaces-bash/gtkdialog/","title":"gtkdialog:","text":"<p>fuente paquete https://mxrepo.com/MX15packages.html</p> <p>tambi\u00e9n disponible en $plugins/comprimidosO.deb</p> <p>Ejemplos en file:///usr/share/doc/gtkdialog/examples/</p>"},{"location":"Tron/1-LEGOS/Bash/interfaces-bash/interfaces/","title":"Interfaces:","text":""},{"location":"Tron/1-LEGOS/Bash/interfaces-bash/interfaces/#gtk-3-con-pygobject","title":"GTK 3 con PyGObject","text":"<p>Fuente: Referencia de la API</p> <p>Fuente: PyOBject sirve para todas las plataformas...</p> <p>Fuente: Documentacion</p> <p>Fuente: Tutorial - Ver el Ejemplo extendido</p> <p>En esta parte es donde se puede enviar la salida de la interfaz.py a la salida est\u00e1ndar:</p> <pre><code>    def on_button_clicked(self, widget):\n        print(\"Hello World\")\n</code></pre>"},{"location":"Tron/1-LEGOS/Bash/interfaces-bash/interfaces/#gtkdialog","title":"gtkdialog","text":"<p>fuente paquete https://mxrepo.com/MX15packages.html</p> <p>tambi\u00e9n disponible en $plugins/comprimidosO.deb</p> <p>Manual local gtkdialog: gtkdialog.md </p> <p>Tiene una entrada en sesiones web con manuales</p>"},{"location":"Tron/1-LEGOS/Bash/interfaces-bash/interfaces/#zenity","title":"Zenity:","text":"<p>Fuente manual: https://help.gnome.org/users/zenity/stable/index.html.en</p>"},{"location":"Tron/1-LEGOS/Bash/interfaces-bash/interfaces/#importante","title":"Importante:","text":"<p>Claves de acceso Una tecla de acceso es una tecla que le permite realizar una acci\u00f3n desde el teclado en lugar de usar el mouse para elegir un comando de un men\u00fa o cuadro de di\u00e1logo. Cada tecla de acceso se identifica con una letra subrayada en una opci\u00f3n de men\u00fa o cuadro de di\u00e1logo.</p> <p>Algunos cuadros de di\u00e1logo de Zenity admiten el uso de claves de acceso. Para especificar el car\u00e1cter que se usar\u00e1 como clave de acceso, coloque un gui\u00f3n bajo antes de ese car\u00e1cter en el texto del cuadro de di\u00e1logo. El siguiente ejemplo muestra c\u00f3mo especificar la letra 'C' como clave de acceso:</p> <pre><code>\"_Escoge un nombre\".\n</code></pre>"},{"location":"Tron/1-LEGOS/Bash/interfaces-bash/interfaces/#formulario-con-lista","title":"Formulario con lista:","text":"<pre><code>zenity --forms --add-list=\"interfaces\" --list-values=\"eth0|eth1|wlan0\"\n</code></pre>"},{"location":"Tron/1-LEGOS/Bash/interfaces-bash/interfaces/#capturar-la-salida","title":"Capturar la salida:","text":""},{"location":"Tron/1-LEGOS/Bash/interfaces-bash/interfaces/#capturar-salida-1","title":"Capturar salida 1","text":"<pre><code>OUTPUT=$(zenity --forms --title=\"Add Friend\" --text=\"Enter Multicast address\" --separator=\",\" --add-entry=\"IP address\" --add-entry=\"PORT\")\naccepted=$?\nif ((accepted != 0)); then\necho \"something went wrong\"\nexit 1\nfi\n\nip=$(awk -F, '{print $1}' &lt;&lt;&lt;$OUTPUT)\nport=$(awk -F, '{print $2}' &lt;&lt;&lt;$OUTPUT)\n</code></pre>"},{"location":"Tron/1-LEGOS/Bash/interfaces-bash/interfaces/#capturar-salida-2","title":"Capturar salida 2","text":"<pre><code>data=$(\nzenity --forms --title=\"New book\" --text=\"Add new book\" \\\n--add-entry=\"Title\" \\\n--add-entry=\"Author\" \\\n--add-entry=\"Price\" \\\n--add-entry=\"Quantity Available\" \\\n--add-entry=\"Quantity sold\"  )\ncase $? in\n1) echo \"you cancelled\"; exit 1 ;;\n-1) echo \"some error occurred\"; exit -1 ;;\n0) IFS=\"|\" read -r title author price qtyA qtyS &lt;&lt;&lt; \"$data\" ;;\nesac\n</code></pre>"},{"location":"Tron/1-LEGOS/Bash/interfaces-bash/interfaces/#cuadro-combinado","title":"Cuadro combinado:","text":"<pre><code>zenity --forms --title \"Window title\" --text \"Combo name\" --add-combo \"Insert your choice.\" --combo-values \"a|b|c|d|e\"\n\n\u00f3:\n\narray=(a b c d e)\nvalue=$(zenity --entry --title \"Window title\" --entry-text \"${array[@]}\" --text \"Insert your choice.\")\n</code></pre>"},{"location":"Tron/1-LEGOS/Bash/interfaces-bash/interfaces/#codigos-de-salida","title":"C\u00f3digos de salida","text":"<p>Zenity devuelve los siguientes c\u00f3digos de salida:</p> <ul> <li> <p>0 El usuario ha presionado Aceptar o Cerrar </p> </li> <li> <p>1 El usuario presion\u00f3 Cancelar o us\u00f3 las funciones de la ventana para cerrar el cuadro de di\u00e1logo.</p> </li> <li> <p>-1 Ha ocurrido un error inesperado.</p> </li> <li> <p>5 El cuadro de di\u00e1logo se ha cerrado porque se ha alcanzado el tiempo de espera.</p> </li> </ul>"},{"location":"Tron/1-LEGOS/Bash/interfaces-bash/interfaces/#fuente-de-buenos-ejemplos-httpsostechnixcomzenity-create-gui-dialog-boxes-in-bash-scripts","title":"Fuente de buenos ejemplos: https://ostechnix.com/zenity-create-gui-dialog-boxes-in-bash-scripts/","text":"<p>De all\u00ed obtuve el ejemplo de la barra de dezplazamiento:</p> <pre><code>(\necho 10\necho \"# Updating repository Index\"\nsleep 5\n\necho 15\necho \"# Reading input files\"\nsleep 5\n\necho 70\necho \"# Installing packages...\"\nsleep 5\n\necho 100\necho \"# Package Installation completed!\"\n) | zenity --title \"Package Installation Progress Bar\" --progress --auto-close\n</code></pre>"},{"location":"Tron/1-LEGOS/Bash/interfaces-bash/interfaces/#cuadro-de-dialogo-de-progreso","title":"Cuadro de di\u00e1logo de progreso","text":"<p>Para acceder a la lista de opciones admitidas para el cuadro de di\u00e1logo de la barra de progreso, ejecute el siguiente comando:</p> <p><pre><code>zenity --help-progress\n</code></pre> La l\u00ednea que contiene solo el n\u00famero con el echocomando se considerar\u00e1 como el porcentaje del progreso. La l\u00ednea que comienza con el #s\u00edmbolo en el echocomando se imprimir\u00e1 como mensaje de progreso.</p>"},{"location":"Tron/1-LEGOS/Bash/interfaces-bash/interfaces/#de-zenity-help-forms","title":"De zenity --help-forms","text":"<pre><code>Uso:\n    zenity [OPCI\u00d3N\u2026]\n\nOpciones del di\u00e1logo de formularios\n    --forms                                                    Mostrar el di\u00e1logo de formularios\n    --add-entry=Nombre del campo                               A\u00f1adir una entrada nueva en el di\u00e1logo de formularios\n    --add-password=Nombre del campo                            A\u00f1adir una contrase\u00f1a nueva en el di\u00e1logo de formularios\n    --add-calendar=Nombre del campo del calendario             A\u00f1adir un calendario nuevo en el di\u00e1logo de formularios\n    --add-list=Listar el nombre del campo y de la cabecera     A\u00f1adir una lista nueva en el di\u00e1logo de formularios\n    --list-values=Lista de valores separados por |             Lista de valores por lista\n    --column-values=Lista de valores separados por |           Lista de valores por columnas\n    --add-combo=Nombre del campo de la caja combinada          A\u00f1adir una caja combinada nueva en el di\u00e1logo de formularios\n    --combo-values=Lista de valores separados por |            Lista de valores para la caja combinada\n    --show-header                                              Mostrar la cabecera de las columnas\n    --text=TEXTO                                               Establecer el texto del di\u00e1logo\n    --separator=SEPARADOR                                      Establecer el car\u00e1cter separador de la salida\n    --forms-date-format=PATR\u00d3N                                 Establecer el formato para la fecha retornada\n</code></pre>"},{"location":"Tron/1-LEGOS/Bash/interfaces-bash/interfaces/#otros-dialogos-cortos-e-importantes","title":"Otros Di\u00e1logos Cortos e ImPortantes:","text":"<p>Fuente Local: dialogos.html</p>"},{"location":"Tron/1-LEGOS/Bash/interfaces-bash/interfaces/#easybashgui-clic-aqui-para-documentacion","title":"EasyBashGUI Clic aqu\u00ed para documentaci\u00f3n","text":"<p>Fuente:https://github.com/BashGui/easybashgui</p>"},{"location":"Tron/1-LEGOS/Bash/interfaces-bash/interfaces/#menu-cli-con-dialog","title":"Men\u00fa Cli con Dialog:","text":"<pre><code>#!/bin/bash\n\nitems=(1 \"Item 1\"\n2 \"Item 2\")\n\nwhile choice=$(dialog --title \"$TITLE\" \\\n--menu \"Please select\" 10 40 3 \"${items[@]}\" \\\n2&gt;&amp;1 &gt;/dev/tty)\ndo\ncase $choice in\n1) ;; # some action on 1\n2) ;; # some action on 2\n*) ;; # some action on other\nesac\ndone\nclear # clear after user pressed Cancel\n</code></pre>"},{"location":"Tron/1-LEGOS/Bash/interfaces-bash/interfaces/#menu-grafico-con-zenity","title":"Men\u00fa gr\u00e1fico con zenity","text":"<pre><code>#!/bin/bash\n\nitems=(\"Item 1\" \"Item 2\" \"Item 3\")\n\nwhile item=$(zenity --title=\"$title\" --text=\"$prompt\" --list \\\n--column=\"Options\" \"${items[@]}\")\ndo\ncase \"$item\" in\n\"${items[0]}\") echo \"Selected $item, item #1\";;\n\"${items[1]}\") echo \"Selected $item, item #2\";;\n\"${items[2]}\") echo \"Selected $item, item #3\";;\n*) echo \"Ooops! Invalid option.\";;\nesac\ndone\n</code></pre>"},{"location":"Tron/1-LEGOS/Bash/interfaces-bash/interfaces/#whiptail","title":"Whiptail:","text":"<p>Fuente:https://linux.die.net/man/1/whiptail Fuente:https://en.wikibooks.org/wiki/Bash_Shell_Scripting/Whiptail</p>"},{"location":"Tron/1-LEGOS/Bash/interfaces-bash/interfaces/#filebrowser-con-vectores-y-barras-de-desplazamiento-navegador-de-archivos","title":"Filebrowser con vectores y barras de desplazamiento navegador de archivos.","text":"<p>Fuente: https://github.com/pageauc/FileBrowser <pre><code>#!/bin/bash\n\n: '\n                   filebrowse.sh written by Claude Pageau\n\nThis is a whiptail file browser demo that allows navigating through a directory\nstructure and select a specified file type per filext variable.\nIt Returns a filename path if selected.  Esc key exits.\nThis sample code can be used in a script menu to perform an operation that\nrequires selecting a file.\n\n'\n\nstartdir=\"/home/pi\"\nfilext='jpg'\nmenutitle=\"$filext File Selection Menu\"\n\n#------------------------------------------------------------------------------\nfunction Filebrowser()\n{\n# first parameter is Menu Title\n# second parameter is optional dir path to starting folder\n# otherwise current folder is selected\n\nif [ -z $2 ] ; then\ndir_list=$(ls -lhp  | awk -F ' ' ' { print $9 \" \" $5 } ')\nelse\ncd \"$2\"\ndir_list=$(ls -lhp  | awk -F ' ' ' { print $9 \" \" $5 } ')\nfi\n\ncurdir=$(pwd)\nif [ \"$curdir\" == \"/\" ] ; then  # Check if you are at root folder\nselection=$(whiptail --title \"$1\" \\\n--menu \"PgUp/PgDn/Arrow Enter Selects File/Folder\\nor Tab Key\\n$curdir\" 0 0 0 \\\n--cancel-button Cancel \\\n--ok-button Select $dir_list 3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3)\nelse   # Not Root Dir so show ../ BACK Selection in Menu\nselection=$(whiptail --title \"$1\" \\\n--menu \"PgUp/PgDn/Arrow Enter Selects File/Folder\\nor Tab Key\\n$curdir\" 0 0 0 \\\n--cancel-button Cancel \\\n--ok-button Select ../ BACK $dir_list 3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3)\nfi\n\nRET=$?\nif [ $RET -eq 1 ]; then  # Check if User Selected Cancel\nreturn 1\nelif [ $RET -eq 0 ]; then\nif [[ -d \"$selection\" ]]; then  # Check if Directory Selected\nFilebrowser \"$1\" \"$selection\"\nelif [[ -f \"$selection\" ]]; then  # Check if File Selected\nif [[ $selection == *$filext ]]; then   # Check if selected File has .jpg extension\nif (whiptail --title \"Confirm Selection\" --yesno \"DirPath : $curdir\\nFileName: $selection\" 0 0 \\\n--yes-button \"Confirm\" \\\n--no-button \"Retry\"); then\nfilename=\"$selection\"\nfilepath=\"$curdir\"    # Return full filepath  and filename as selection variables\nelse\nFilebrowser \"$1\" \"$curdir\"\nfi\nelse   # Not correct extension so Inform User and restart\nwhiptail --title \"ERROR: File Must have $filext Extension\" \\\n--msgbox \"$selection\\nYou Must Select a $filext file\" 0 0\nFilebrowser \"$1\" \"$curdir\"\nfi\nelse\n# Could not detect a file or folder so Try Again\nwhiptail --title \"ERROR: Selection Error\" \\\n--msgbox \"Error Changing to Path $selection\" 0 0\nFilebrowser \"$1\" \"$curdir\"\nfi\nfi\n}\n\n\nFilebrowser \"$menutitle\" \"$startdir\"\n\nexitstatus=$?\nif [ $exitstatus -eq 0 ]; then\nif [ \"$selection\" == \"\" ]; then\necho \"User Pressed Esc with No File Selection\"\nelse\nwhiptail --title \"File was selected\" --msgbox \" \\\n\n        File Selected information\n\n        Filename : $filename\n        Directory: $filepath\n\n        \\\n        \" 0 0 0\necho \"\"\necho \"---- $0 variable output values -----\"\necho \"\"\necho '$filename = '$filename\necho '$filepath = '$filepath\necho \"\"\necho \"You can combine variables per\"\necho 'echo $filepath/$filename'\necho \"result is\"\necho \"$filepath/$filename\"\necho \"\"\necho \"Variables can be used in command execution\"\nfi\nelse\necho \"User Pressed Cancel. with No File Selected.\"\nfi\necho \"\"\necho \"This is demo code that can be used in your own projects\"\n</code></pre></p>"},{"location":"Tron/1-LEGOS/Bash/interfaces-bash/interfaces/#lista-de-radios-con-vectores","title":"Lista de Radios Con vectores:","text":"<p>Fuente : https://saveriomiroddi.github.io/Shell-scripting-adventures</p> <p><pre><code>declare -A v_usb_storage_devices=([/dev/sdb]=\"My USB Key\" [/dev/sdc]=\"My external HDD\")\n\nentry_options=()\nentries_count=${#v_usb_storage_devices[@]}\nmessage=$'Choose an external device. THE DEVICE WILL BE COMPLETELY ERASED.\\n\\nAvailable (USB) devices:\\n\\n'\n\nfor dev in \"${!v_usb_storage_devices[@]}\"; do\nentry_options+=(\"$dev\")\nentry_options+=(\"${v_usb_storage_devices[$dev]}\")\nentry_options+=(\"OFF\")\ndone\n\nv_sdcard_device=$(whiptail --radiolist --title \"Device choice\" \"$message\" 20 78 $entries_count -- \"${entry_options[@]}\" 3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3)\n\necho \"$v_sdcard_device\" # Y dicen que la primera fue elegida\n/dev/sdb\n</code></pre> Usamos --en caso de que cualquiera de los entry_optionsiniciados con -; si no hacemos esto, whiptailpensar\u00e1 que es un par\u00e1metro de l\u00ednea de comandos.</p> <p>Tenga en cuenta que debido a que las matrices asociativas no est\u00e1n ordenadas, es posible que el orden de visualizaci\u00f3n no refleje el orden de inserci\u00f3n de la tupla. Para solucionar esto, uno puede ordenar manualmente las claves (esto est\u00e1 fuera del alcance, a menos que los lectores lo soliciten).</p> <p>El formato general de los par\u00e1metros de este widget es: <pre><code>whiptail --radiolist [--title mytitle] &lt;body_message_header&gt; &lt;width&gt; &lt;height&gt; &lt;entries_count&gt; -- &lt;entry_1_key&gt; &lt;entry_1_description&gt; &lt;entry_1_state&gt; [&lt;other entry params&gt;...]\n</code></pre> Para almacenar los par\u00e1metros de definici\u00f3n de la lista (clave, descripci\u00f3n, estado), usamos una matriz:</p> <p>ciclamos las definiciones matriz asociativa ( for dev in \"${!v_usb_storage_devices[@]}\") para cada ciclo, agregamos a la $entry_optionsmatriz la clave (ruta del dispositivo), la descripci\u00f3n y el estado predeterminado ( OFFpara todos, en este caso).</p>"},{"location":"Tron/1-LEGOS/Bash/interfaces-bash/interfaces/#otros","title":"Otros:","text":"<p>Base de datos:https://github.com/theJaxon/bash_dbengine/blob/master/db_operations.sh</p> <p>Buscar Editar: Busca un texto en un conjunto de archivos y permite seleccionarlo visualmente entre los resultados y editarlo en $EDITOR fuentehttps://github.com/StefanMajonez/search-edit</p>"},{"location":"Tron/1-LEGOS/Bash/matrices/MatricesAsociativas/","title":"Bash Matrices Vectores Array Arrays asociativas asociativa menu y men\u00fas","text":""},{"location":"Tron/1-LEGOS/Bash/matrices/MatricesAsociativas/#matrices","title":"Matrices:","text":""},{"location":"Tron/1-LEGOS/Bash/matrices/MatricesAsociativas/#creacion","title":"Creaci\u00f3n:","text":"<pre><code>declare -A \u201cNombre de matriz\u201d\n</code></pre>"},{"location":"Tron/1-LEGOS/Bash/matrices/MatricesAsociativas/#asignacion","title":"Asignaci\u00f3n:","text":"<pre><code>* NombreArray [ key ] =value\n* declare -A ArrayName = ( [ clave1 ] =Valor1 [ clave2 ] =Valor2 [ Clave3 ] =Valor3\u2026. )\n</code></pre>"},{"location":"Tron/1-LEGOS/Bash/matrices/MatricesAsociativas/#imprimir","title":": Imprimir:","text":"<pre><code>1. Un valor dada la clave:\n        - echo ${NombreArray[nombreClave]}\n\n2. Todos los valores iterando en todas las claves:\n        - for key in \"${!ArrayName[@]}\"; do echo $key; done\n\n3. Todos las claves por expansi\u00f3n:\n        - echo \" ${!muestraArray1[@]} \"\n\n4. Clave y Valor iterando por valor:\n        - for val in \"${ArrayName[@]}\"; do echo $val; done\n\n5.  Todos los valores por expansi\u00f3n:\n        - echo \"${sampleArray1[@]}\"\n\n6. Clave Valor iterando por clave:\n        - for key in \"${!sampleArray1[@]}\"; do echo \"$key  ${sampleArray1[$key]}\"; done\n\n7. Contando las duplas del arreglo:\n        - echo \"${#ArrayName[@]}\"\n\n9. A\u00f1adiendo Valores: - ArrayName+=([key]=value)\n\n10. Borrando del arreglo por clave:\n        - unset ArrayName[Key]\n\n11. Verificar un Elemento:\n        - $ if [ ${ArrayName[searchKEY]+_} ]; then echo \"Exists\"; else echo \"Not available\"; fi\n\n12. Borrar todo el vector:\n        - unset ArrayName\n</code></pre>"},{"location":"Tron/1-LEGOS/Bash/matrices/easy/","title":"EasyBashGUI","text":"<p>Fuente:https://github.com/BashGui/easybashgui</p> <p>EasyBashGUI es una biblioteca de funciones Bash para *BSD y GNU/Linux que tiene como objetivo brindar funciones GUI simples usando yad, gtkdialog, kdialog, zenity, Xdialog, \u00a9dialog, whiptail o bash incorporados dependiendo de si KDE o GNOME se est\u00e1n ejecutando o no, Yad /Gtkdialog/Xdialog instalado o no y, eventualmente, el servidor X ejecut\u00e1ndose o no.</p> <p><pre><code>Proyecto EasyBashGUI.\n\n\nIntroducci\u00f3n\n\nEasyBashGUI es una biblioteca de funciones Bash compatible con Posix que tiene como objetivo brindar funciones GUI simples usando yad, gtkdialog, kdialog, zenity, Xdialog, dialog o whiptail dependiendo de KDE o GNOME en ejecuci\u00f3n o no, Yad, Gtkdialog o Xdialog instalado o no y servidor X corriendo o no ((c)di\u00e1logo o cola de l\u00e1tigo es el m\u00ednimo). Por lo tanto, si el programador bash escribe: \"mensaje 'Gracias por usar este programa'\", no tiene que preocuparse en qu\u00e9 entorno se ejecuta su programa: es suficiente con al menos (c)dialog o whiptail instalado, y el programa funcionar\u00e1 como se espera . Obviamente, si el usuario tambi\u00e9n tiene instalado KDE, GNOME o gtkdialog/Xdialog (y est\u00e1 en una sesi\u00f3n X), el programa tendr\u00e1 \"otro aspecto\", pero el flujo l\u00f3gico sigue siendo exactamente el mismo.\nPuede forzar el uso del widget a trav\u00e9s de la variable \"supermodo\" (valores posibles: \"yad\", \"gtkdialog\", \"kdialog\", \"zenity\", \"Xdialog\", \"dialog\", \"none\";\npor ejemplo: &gt;exportar supermodo=\"kdialog\" &amp;&amp; fuente easybashgui &amp;&amp; mensaje Hello ).\nNOTA sobre el modo \"ninguno\": debe asegurarse de que STDERR *no* sea redirigido, para poder ver las cajas de shell en su terminal.\n\nEn la \"suite\" de EasyBashGUI hay un iniciador (\"easybashgui\"), un iniciador que alterna algunas opciones de depuraci\u00f3n (\"easybashgui-debug\"), una biblioteca de widgets (\"easybashgui_X.X.X.lib\") y un script independiente (m\u00e1s bien antiguo hoy en d\u00eda) para crear cuadros de di\u00e1logo externamente (\"easydialog-legacy\"). Adem\u00e1s, tambi\u00e9n hay otra biblioteca (\"easybashlib\") para funciones auxiliares opcionales (gracias a ella, ya no necesita usar la funci\u00f3n \"clean_temp ()\" al final de sus scripts EBG).\n</code></pre> <pre><code>Library functions.\n\nmessage\nok_message\nalert_message\nnotify_message\ntext\nquestion\ninput\nmenu\ntagged_menu\nlist\nfselect (= \"file select\" )\ndselect (= \"directory select\" )\nwait_seconds\nwait_for\nterminate_wait_for\nprogress\nadjust\nnotify (*)\nnotify_change (*)\n\n(* =&gt; only if you have \"yad\" installed)\n</code></pre> <pre><code>How to install and use.\n\nExtract all files...\n(e.g.: &gt;tar -xzvf EasyBashGUI_X.X.X )\n\nCd in ./EasyBashGUI source dir...\n(e.g.: &gt;cd ./EasyBashGUI_X.X.X )\n\nInstall it (as root)...\n(e.g.: &gt;sudo make install )\n\nUninstall it (as root)...\n(e.g.: &gt;sudo make uninstall )\n\nThat's it !!!!!\n\n\n\nIf you want use it in your scripts, simply source \"easybashgui\" before use...\n(e.g.: \"source easybashgui\" )\n\n\nE.g.:\n-------------------\n#!/bin/bash\nsource easybashgui\n#\nmessage \"this\"\ninput 1 ( \"that\" )\nmenu \"this\" \"that\"\nlist +\"you\" -\"me\" +\"her\"\n...\netc.etc.\n...\n</code></pre> <pre><code>Synopsis.\n\nquestion -&gt; \"[text]\"                 =&gt;       ( 1 argument, box output to exit code and STDERR ) (*)\nmessage -&gt; \"[text]\"                  =&gt;       ( 1 argument )\nalert_message -&gt; \"[text]\"            =&gt;       ( 1 argument )\nok_message -&gt; \"[text]\"               =&gt;       ( 1 argument )\nnotify_message -&gt; &lt;-i \"[icon]\"&gt; \"[text]\" =&gt;   ( 1 option, 1 argument )\ntext                                 =&gt;       ( STDIN, NO argument, box output to \"${dir_tmp}/${file_tmp}\" and STDERR ) (^)\nwait_seconds -&gt; \"[integer]\"          =&gt;       ( 1 argument )\nwait_for -&gt; \"[text]\"                 =&gt;       ( 1 argument, PID to kill to \"wait_for__PID\" variable and STDERR ) (@)\nterminate_wait_for                   =&gt;       ( 1 argument only in easydialog, otherwise, NO argument ) (@)\nfselect -&gt; \"&lt;init. dir.&gt;\"            =&gt;       ( 1 &lt;optional&gt; argument, box output to \"${dir_tmp}/${file_tmp}\" and STDERR ) (#)\ndselect -&gt; \"&lt;init. dir.&gt;\"            =&gt;       ( 1 &lt;optional&gt; argument, box output to \"${dir_tmp}/${file_tmp}\" and STDERR ) (#)\ninput -&gt; 1 \"&lt;label 1&gt;\" \"[init 1]\"    =&gt;       ( 2-3 arguments, box output to \"${dir_tmp}/${file_tmp}\" and STDERR )\ninput -&gt; 2 \"[label 1]\" \"[init 1]\" \"[label 2]\" \"[init 2]\"                     =&gt; ( 5 arguments, box output to \"${dir_tmp}/${file_tmp}\" and STDERR )\ninput -&gt; 3 \"[label 1]\" \"[init 1]\" \"[label 2]\" \"[init 2]\" \"[label 3]\" \"[init 3]\" =&gt; ( 7 arguments, box output to \"${dir_tmp}/${file_tmp}\" and STDERR )\nmenu -&gt; \"[item 1]\" ... \"[item n]\"    =&gt;       ( [n] arguments, box output to \"${dir_tmp}/${file_tmp}\" and STDERR ) (%)\ntagged_menu -&gt; \"[item 1]\" \"[tag 1]\" ... \"[item n]\" \"[tag n]\"    =&gt;       ( [n*2] arguments, box output to \"${dir_tmp}/${file_tmp}\" and STDERR ) (%)\nlist -&gt; &lt;+|-&gt;\"[item 1]\" ... &lt;+|-&gt;\"[item n]\"    =&gt;       ( [n] arguments, optionally prefixed by \"+\"(plus) or \"-\"(minus), box output to \"${dir_tmp}/${file_tmp}\" and STDERR ) (%)\nprogress -&gt; \"[text]\"                         =&gt;       ( percent with or without '%' in STDIN, 1 argument )\nprogress -&gt; \"[text]\" \"[elements number]\"     =&gt;       ( \"PROGRESS\" string in STDIN, 2 arguments )\nadjust -&gt; \"[text]\" \"[min]\" \"[init]\" \"[max]\" =&gt; ( 4 arguments, box output to \"${dir_tmp}/${file_tmp}\" and STDERR )\nnotify -&gt; &lt;-c \"[click command (for mouse left button)]\"&gt; &lt;-i \"[icon_good]#[icon_bad]\"&gt; &lt;-t \"[tooltip_good]#[tooltip_bad]\"&gt; \"[menu item 1]\" \"[menu command 1]\" ... \"[menu item n]\" \"[menu command n]\"        =&gt;       ( 3 options, [n*2] mandatory arguments )\nnotify_change -&gt; &lt;-i \"[new icon]\"&gt; &lt;-t \"[new tooltip]\"&gt; \"[good|bad]\"        =&gt;      ( 2 options, 1 mandatory argument ) </code></pre> <pre><code>(*) = \"0\" el estado de salida es \"S\u00cd\", \"1\" el estado de salida es \"NO\", otros c\u00f3digos de salida que debe hacer salir del programa: normalmente en un script solo tiene que verificar el estado de salida para conocer la elecci\u00f3n del usuario;\n(^) = funci\u00f3n de texto escribe texto en STDIN en el archivo \"${dir_tmp}/${file_tmp}\" y (solo) para kdialog, zenity y Xdialog tambi\u00e9n puede editar texto para escribir;\n(@) = la funci\u00f3n \"esperar\" crea una ventana con un texto y devuelve el control al programa principal... despu\u00e9s de un trabajo, puede cerrar la ventana a trav\u00e9s de la funci\u00f3n \"terminar_esperar\" (no necesita argumento);\n(#) = tenga cuidado que si est\u00e1 en \"modo consola\" o sin X, a trav\u00e9s de cdialog, la selecci\u00f3n se hace con la tecla ESPACIO, y NO con la tecla enter: recu\u00e9rdelo;\n(%) = las funciones \"men\u00fa\" y \"lista\" difieren en cuanto a las opciones: el men\u00fa permite una sola opci\u00f3n, la lista permite m\u00faltiples opciones; desde la versi\u00f3n 7.1.0, puede usar tagged_menu (): genera etiquetas (por ejemplo: \"tagged_menu 1 A 2 B\" -&gt; si el usuario selecciona la etiqueta \"A\", la funci\u00f3n genera el elemento \"1\");\n</code></pre> <pre><code>Since EasyBashGUI v.1.2.4, all windows functions support options \"&lt;-w|-width&gt; [integer]\", and \"&lt;-h|-height&gt; [integer]\" for custom window size (note: not used for \"notify_message\"):\n</code></pre></p> <p><pre><code>Library examples:\n1)\nquestion \"Do you like Contry music ?\"\nanswer=\"${?}\"\nif [ ${answer} -eq 0 ]\nthen\nok_message \"You do like it :)\"\nelif [ ${answer} -eq 1 ]\nthen\nalert_message \"You don't like it :(\"\nelse\nok_message \"See you\"\nexit 0\nfi\n\n2)\necho -e \"What's your name?\\n\\nMy name's:\\nVittorio\" | text\n\n3)\nwait_for \"I'm sleeping 4 seconds... good night...\"\nsleep 4\nterminate_wait_for\n\n4)\nfselect\nfile=\"$(0&lt; \"${dir_tmp}/${file_tmp}\" )\"\n\n5)\ninput 1 \"(write here IP address)\"\ninput 1 \"Please, write IP address\" \"192.168.1.1\"\ninput 3 \"Username\" \"root\" \"IP address\" \"192.168.0.1\" \"Destination directory\" \"/tmp\"\nIFS=$'\\n' ; choices=( $(0&lt; \"${dir_tmp}/${file_tmp}\" ) ) ; IFS=$' \\t\\n'\nuser=\"${choices[0]}\"\nip=\"${choices[1]}\"\ndir=\"${choices[2]}\"\n\n6)\nfor i in 10 20 30 40 50 60 70 80 90 100\ndo\necho \"${i}\"\nsleep 2\ndone | progress \"This is a test progress...\"\n\n7)\nadjust \"Please, set Volume level\" 15 40 75\n\n8)\nwomen=( Angela Carla Michelle Noemi Urma Marisa Karina Anita Josephine Rachel )\nfor (( index=0 ; index &lt; ${#women[@]} ; index++ })) do\ntoday_prefered_woman=\"${women[${index}]}\"\nkiss \"${today_prefered_woman}\"\nsleep 1\n#\n# Job done !!\n# then...\necho \"PROGRESS\"\n#\ndone | progress \"This is a _LOVE_ progress...\" \"${#women[@]}\"\n# if you use \"PROGRESS\" string in STDIN do not forget second argument ( \"[elements number]\" )\n\n9)\nnotify -t \"Good tooltip:OK#Bad tooltip:BAD\" -i \"/usr/local/share/pixmaps/nm-signal-100.png#gtk-fullscreen\" \"Xclock\" \"xclock\" \"Xcalc\" \"xcalc\"\n#\nwhile :\n    do\nmenu GOOD BAD\n    answer=$(0&lt; \"${dir_tmp}/${file_tmp}\" )\n#\nif [ \"${answer}\" = \"GOOD\" ]\nthen\nnotify_message \"Changed in \\\"good\\\" ...\"\nnotify_change \"good\"\nelif [ \"${answer}\" = \"BAD\" ]\nthen\nnotify_message \"Changed in \\\"bad\\\" ...\"\nnotify_change -i \"gtk-help\" -t \"This tooltip is bad\" \"bad\"\nelse\nexit\nfi\n#\ndone\n\n\n\n\n\n( For the old \"easydialog-legacy\" examples, you would launch it simply with \"-h\" option )\n</code></pre> <pre><code>Nota sobre el modo de consola.\n\nEasyBashGUI no funciona con el \"di\u00e1logo\" original (el antiguo) que es muy limitado; si tiene la primera versi\u00f3n \"dialog\" en su caja, instale \"cdialog\" y alias o vincule \"dialog\" a cdialog. No hay problema en caso de que tenga instalado al menos \"whiptail\": desde la versi\u00f3n 4.0.0, EasyBashGUI puede usarlo en lugar de (c)dialog.\nDesde la versi\u00f3n 5.0.0, puede usar EasyBashGUI incluso si NO hay ning\u00fan WIDGET instalado (es decir: no gtkdialog, no kdialog, no zenity, no Xdialog, no (c)dialog, no whiptail... doh!!!!!). Para usar EBG \"super bare\", simplemente elimine la biblioteca \".lib\" de su ruta, o establezca var \"supermodo\" en \"ninguno\" antes de obtener el abastecimiento de easybashgui (por ejemplo: &gt;exportar supermodo=\"ninguno\" &amp;&amp; fuente easybashgui &amp;&amp; mensaje \"Hola mundo...\" )\n</code></pre> <pre><code>Nota sobre el modo gtkdialog.\n\nEasyBashGUI establece declaraciones de salida de gtkdialog como variables a trav\u00e9s de \"eval\". De esta manera, en teor\u00eda, podr\u00eda ser posiblemente peligroso; sin embargo, hasta el momento, no conozco ninguna forma alternativa...\n</code></pre></p>"},{"location":"Tron/1-LEGOS/Bash/matrices/interfaces/","title":"Interfaces:","text":""},{"location":"Tron/1-LEGOS/Bash/matrices/interfaces/#ejemplos-de-dialogos-sencillos-en-local","title":"Ejemplos de dialogos sencillos en local","text":""},{"location":"Tron/1-LEGOS/Bash/matrices/interfaces/#easybashgui-clic-aui-para-documentacion","title":"EasyBashGUI Clic au\u00ed para documentaci\u00f3n","text":"<p>Fuente:https://github.com/BashGui/easybashgui</p>"},{"location":"Tron/1-LEGOS/Bash/matrices/interfaces/#menu-cli-con-dialog","title":"Men\u00fa Cli con Dialog:","text":"<pre><code>#!/bin/bash\n\nitems=(1 \"Item 1\"\n2 \"Item 2\")\n\nwhile choice=$(dialog --title \"$TITLE\" \\\n--menu \"Please select\" 10 40 3 \"${items[@]}\" \\\n2&gt;&amp;1 &gt;/dev/tty)\ndo\ncase $choice in\n1) ;; # some action on 1\n2) ;; # some action on 2\n*) ;; # some action on other\nesac\ndone\nclear # clear after user pressed Cancel\n</code></pre>"},{"location":"Tron/1-LEGOS/Bash/matrices/interfaces/#menu-grafico-con-zenity","title":"Men\u00fa gr\u00e1fico con zenity","text":"<pre><code>#!/bin/bash\n\nitems=(\"Item 1\" \"Item 2\" \"Item 3\")\n\nwhile item=$(zenity --title=\"$title\" --text=\"$prompt\" --list \\\n--column=\"Options\" \"${items[@]}\")\ndo\ncase \"$item\" in\n\"${items[0]}\") echo \"Selected $item, item #1\";;\n\"${items[1]}\") echo \"Selected $item, item #2\";;\n\"${items[2]}\") echo \"Selected $item, item #3\";;\n*) echo \"Ooops! Invalid option.\";;\nesac\ndone\n</code></pre>"},{"location":"Tron/1-LEGOS/Bash/matrices/interfaces/#whiptail","title":"Whiptail:","text":"<p>Fuente:https://linux.die.net/man/1/whiptail Fuente:https://en.wikibooks.org/wiki/Bash_Shell_Scripting/Whiptail</p>"},{"location":"Tron/1-LEGOS/Bash/matrices/interfaces/#filebrowser-con-vectores-y-barras-de-desplazamiento-navegador-de-archivos","title":"Filebrowser con vectores y barras de desplazamiento navegador de archivos.","text":"<p>Fuente: https://github.com/pageauc/FileBrowser <pre><code>#!/bin/bash\n\n: '\n                   filebrowse.sh written by Claude Pageau\n\nThis is a whiptail file browser demo that allows navigating through a directory\nstructure and select a specified file type per filext variable.\nIt Returns a filename path if selected.  Esc key exits.\nThis sample code can be used in a script menu to perform an operation that\nrequires selecting a file.\n\n'\n\nstartdir=\"/home/pi\"\nfilext='jpg'\nmenutitle=\"$filext File Selection Menu\"\n\n#------------------------------------------------------------------------------\nfunction Filebrowser()\n{\n# first parameter is Menu Title\n# second parameter is optional dir path to starting folder\n# otherwise current folder is selected\n\nif [ -z $2 ] ; then\ndir_list=$(ls -lhp  | awk -F ' ' ' { print $9 \" \" $5 } ')\nelse\ncd \"$2\"\ndir_list=$(ls -lhp  | awk -F ' ' ' { print $9 \" \" $5 } ')\nfi\n\ncurdir=$(pwd)\nif [ \"$curdir\" == \"/\" ] ; then  # Check if you are at root folder\nselection=$(whiptail --title \"$1\" \\\n--menu \"PgUp/PgDn/Arrow Enter Selects File/Folder\\nor Tab Key\\n$curdir\" 0 0 0 \\\n--cancel-button Cancel \\\n--ok-button Select $dir_list 3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3)\nelse   # Not Root Dir so show ../ BACK Selection in Menu\nselection=$(whiptail --title \"$1\" \\\n--menu \"PgUp/PgDn/Arrow Enter Selects File/Folder\\nor Tab Key\\n$curdir\" 0 0 0 \\\n--cancel-button Cancel \\\n--ok-button Select ../ BACK $dir_list 3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3)\nfi\n\nRET=$?\nif [ $RET -eq 1 ]; then  # Check if User Selected Cancel\nreturn 1\nelif [ $RET -eq 0 ]; then\nif [[ -d \"$selection\" ]]; then  # Check if Directory Selected\nFilebrowser \"$1\" \"$selection\"\nelif [[ -f \"$selection\" ]]; then  # Check if File Selected\nif [[ $selection == *$filext ]]; then   # Check if selected File has .jpg extension\nif (whiptail --title \"Confirm Selection\" --yesno \"DirPath : $curdir\\nFileName: $selection\" 0 0 \\\n--yes-button \"Confirm\" \\\n--no-button \"Retry\"); then\nfilename=\"$selection\"\nfilepath=\"$curdir\"    # Return full filepath  and filename as selection variables\nelse\nFilebrowser \"$1\" \"$curdir\"\nfi\nelse   # Not correct extension so Inform User and restart\nwhiptail --title \"ERROR: File Must have $filext Extension\" \\\n--msgbox \"$selection\\nYou Must Select a $filext file\" 0 0\nFilebrowser \"$1\" \"$curdir\"\nfi\nelse\n# Could not detect a file or folder so Try Again\nwhiptail --title \"ERROR: Selection Error\" \\\n--msgbox \"Error Changing to Path $selection\" 0 0\nFilebrowser \"$1\" \"$curdir\"\nfi\nfi\n}\n\n\nFilebrowser \"$menutitle\" \"$startdir\"\n\nexitstatus=$?\nif [ $exitstatus -eq 0 ]; then\nif [ \"$selection\" == \"\" ]; then\necho \"User Pressed Esc with No File Selection\"\nelse\nwhiptail --title \"File was selected\" --msgbox \" \\\n\n        File Selected information\n\n        Filename : $filename\n        Directory: $filepath\n\n        \\\n        \" 0 0 0\necho \"\"\necho \"---- $0 variable output values -----\"\necho \"\"\necho '$filename = '$filename\necho '$filepath = '$filepath\necho \"\"\necho \"You can combine variables per\"\necho 'echo $filepath/$filename'\necho \"result is\"\necho \"$filepath/$filename\"\necho \"\"\necho \"Variables can be used in command execution\"\nfi\nelse\necho \"User Pressed Cancel. with No File Selected.\"\nfi\necho \"\"\necho \"This is demo code that can be used in your own projects\"\n</code></pre></p>"},{"location":"Tron/1-LEGOS/Bash/matrices/interfaces/#lista-de-radios-con-vectores","title":"Lista de Radios Con vectores:","text":"<p>Fuente : https://saveriomiroddi.github.io/Shell-scripting-adventures</p> <p><pre><code>declare -A v_usb_storage_devices=([/dev/sdb]=\"My USB Key\" [/dev/sdc]=\"My external HDD\")\n\nentry_options=()\nentries_count=${#v_usb_storage_devices[@]}\nmessage=$'Choose an external device. THE DEVICE WILL BE COMPLETELY ERASED.\\n\\nAvailable (USB) devices:\\n\\n'\n\nfor dev in \"${!v_usb_storage_devices[@]}\"; do\nentry_options+=(\"$dev\")\nentry_options+=(\"${v_usb_storage_devices[$dev]}\")\nentry_options+=(\"OFF\")\ndone\n\nv_sdcard_device=$(whiptail --radiolist --title \"Device choice\" \"$message\" 20 78 $entries_count -- \"${entry_options[@]}\" 3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3)\n\necho \"$v_sdcard_device\" # Y dicen que la primera fue elegida\n/dev/sdb\n</code></pre> Usamos --en caso de que cualquiera de los entry_optionsiniciados con -; si no hacemos esto, whiptailpensar\u00e1 que es un par\u00e1metro de l\u00ednea de comandos.</p> <p>Tenga en cuenta que debido a que las matrices asociativas no est\u00e1n ordenadas, es posible que el orden de visualizaci\u00f3n no refleje el orden de inserci\u00f3n de la tupla. Para solucionar esto, uno puede ordenar manualmente las claves (esto est\u00e1 fuera del alcance, a menos que los lectores lo soliciten).</p> <p>El formato general de los par\u00e1metros de este widget es: <pre><code>whiptail --radiolist [--title mytitle] &lt;body_message_header&gt; &lt;width&gt; &lt;height&gt; &lt;entries_count&gt; -- &lt;entry_1_key&gt; &lt;entry_1_description&gt; &lt;entry_1_state&gt; [&lt;other entry params&gt;...]\n</code></pre> Para almacenar los par\u00e1metros de definici\u00f3n de la lista (clave, descripci\u00f3n, estado), usamos una matriz:</p> <p>ciclamos las definiciones matriz asociativa ( for dev in \"${!v_usb_storage_devices[@]}\") para cada ciclo, agregamos a la $entry_optionsmatriz la clave (ruta del dispositivo), la descripci\u00f3n y el estado predeterminado ( OFFpara todos, en este caso).</p>"},{"location":"Tron/1-LEGOS/Bash/matrices/interfaces/#otros","title":"Otros:","text":"<p>Base de datos:https://github.com/theJaxon/bash_dbengine/blob/master/db_operations.sh</p> <p>Buscar Editar: Busca un texto en un conjunto de archivos y permite seleccionarlo visualmente entre los resultados y editarlo en $EDITOR fuentehttps://github.com/StefanMajonez/search-edit</p>"},{"location":"Tron/1-LEGOS/Bash/notificar%20cambios%20archivos/notificar-cambios/","title":"Bash notificar cambios  cuando cambia un archivo.","text":""},{"location":"Tron/1-LEGOS/Bash/notificar%20cambios%20archivos/notificar-cambios/#con-inotifywait","title":"Con inotifywait","text":"<pre><code>while [[ \"true\" == \"true\" ]]; do\ninotifywait -q -e close_write ruta_archivo |\nwhile read -r filename event; do\ncomandos_a_ejecutar   done  done\n</code></pre>"},{"location":"Tron/1-LEGOS/Bash/notificar%20cambios%20archivos/notificar-cambios/#con-systemmd-y-una-unidad-de-ruta","title":"Con systemmd y Una unidad de ruta:","text":"<p>Fuente: https://www.freedesktop.org/software/systemd/man/systemd.path.html</p> <p>Fuente: Configurar unidad de ruta: https://www.putorius.net/systemd-path-units.html</p> <p>Fuente:  entender las unidades de sistema: https://www.digitalocean.com/community/tutorials/understanding-systemd-units-and-unit-files</p>"},{"location":"Tron/1-LEGOS/Bash/notificar%20cambios%20archivos/notificar-cambios/#con-entr","title":"Con entr","text":"<p>Fuente: Man: https://man.archlinux.org/man/community/entr/entr.1.en</p> <p>Fuente: </p> <pre><code>Instalar:\n - sudo apt-get install entr\n</code></pre>"},{"location":"Tron/1-LEGOS/Bash/notificar%20cambios%20archivos/notificar-cambios/#como-usar-entr","title":"\u00bfC\u00f3mo usar entr?","text":"<pre><code>* Si tiene un example.txtarchivo y desea monitorearlo y ejecutar un comando cada vez que se cambia:\n        -ls example.txt | entr echo \"watching...\"\n\n* Otro uso b\u00e1sico es que primero defina su script bash y lo haga ejecutable, luego ejecute este comando.\n        - find . -type f | entr \"./run.sh\"\n\nfind . -type f devuelve una lista de archivos dentro del directorio actual de forma recursiva.\n        El resultado se canaliza luego al entr comando, ejecutando el script run.sh.\n\n* Usos Varios:\n        - ls -d * | entr sh -c 'make &amp;&amp; make test'\n- ls *.css *.html | entr reload-browser Firefox\n        - echo file.txt | entr echo Changed!\n\n* Para el uso de directorios -d, pero debe usarlo en el ciclo, por ejemplo:\n        - while true; do find path/ | entr -d echo Changed; done\n\u00f3:\n        - while true; do ls path/* | entr -pd echo Changed; done\n\n* Otra forma:\n        - #!/bin/bash\n- exec entr /usr/local/bin/do_stuff &lt; &lt;(echo /path/to/file)\n\n* Correr en otro  lenguaje:\n        - ls hello_world.rb | entr -r ruby hello_world.rb\n\n        Cuando cambia hello_word.rb ejecuta ruby hello_world.rb\n</code></pre>"},{"location":"Tron/1-LEGOS/Bash/notificar%20cambios%20archivos/notificar-cambios/#entr-ejemplos","title":"entr Ejemplos:","text":"<pre><code>Reconstruya un proyecto si los archivos de origen cambian, limitando la salida a las primeras 20 l\u00edneas:\n- find src/ | entr -s 'make | head -n 20'\n\nInicie y vuelva a cargar autom\u00e1ticamente un servidor node.js:\n        - ls *.js | entr -r node app.js\n\nBorre la pantalla y ejecute una consulta despu\u00e9s de que se actualice el script SQL:\n        - echo my.sql | entr -cp psql -f /_\n\nReconstruya el proyecto si se modifica o agrega un archivo fuente al directorio src/:\n        - while sleep 0.1; do ls src/*.rb | entr -d make; done\n\nRecargar autom\u00e1ticamente un servidor web o terminar si el servidor sale\n        - ls * | entr -rz ./httpd\n</code></pre>"},{"location":"Tron/1-LEGOS/Bash/notificar%20cambios%20archivos/notificar-cambios/#utilizar-entr-con-git","title":"Utilizar entr con git","text":"<p>Fuente: https://jvns.ca/blog/2020/06/28/entr/</p>"},{"location":"Tron/1-LEGOS/Bash/notificar%20cambios%20archivos/notificar-cambios/#entr-pagina-man-page","title":"entr pagina man  page","text":"<pre><code>NAME\nentr - run arbitrary commands when files change\nSYNOPSIS\n[-cdpr ] utility [argument ... ] [/_ ]\nDESCRIPTION\nA list of files provided on the standard input and the utility is executed using the supplied arguments if any of them change. waits for the child process to finish before responding to subsequent file system events. A TTY is also opened before entering the watch loop in order to support interactive utilities.\n\nThe arguments are as follows:\n\n-c\nExecute /usr/bin/clear before invoking the utility specified on the command line.\n-d\nTrack the directories of regular files provided as input and exit if a new file is added. This option also enables directories to be specified explicitly. Files with names beginning with `.' are ignored.\n-p\nPostpone the first execution of the utility until a file is modified.\n-r\nReload a persistent child process. SIGTERM is used to terminate the utility before it is restarted. A process group is created to prevent shell scripts from masking signals. waits for the utility to exit to ensure that resources such as sockets have been closed.\nThe first occurrence of /_ on the command line will be replaced with the absolute path of the first file that was modified. If the restart option is used the first file under watch is treated as the default.\n\nENVIRONMENT\nIf PAGER is undefined, entr will assign /bin/cat to prevent interactive utilities from waiting for keyboard input if output does not fit on the screen.\nEXIT STATUS\nThe utility exits with one of the following values:\n0\nSIGINT or SIGTERM was received\n1\nNo regular files were provided as input or an error occurred\n2\nA file was added to a directory and the directory watch option was specified\n\nEXAMPLES\nRebuild a project if source files change, limiting output to the first 20 lines:\n$ find src/ | entr sh -c 'make | head -n 20'\nLaunch and auto-reload a node.js server:\n\n$ ls *.js | entr -r node app.js\nClear the screen and run a query after the SQL script is updated:\n\n$ echo my.sql | entr -p psql -f /_\nRebuild project if a source file is modified or added to the src/ directory:\n\n$ while true; do ls src/*.rb | entr -d make; done\n</code></pre>"},{"location":"Tron/1-LEGOS/Bash/notificar%20cambios%20archivos/notificar-cambios/#codigo-simple","title":"C\u00f3digo simple:","text":""},{"location":"Tron/1-LEGOS/Bash/notificar%20cambios%20archivos/notificar-cambios/#ejemplo-1-con-whatch","title":"Ejemplo 1 con Whatch.","text":"<p>Fuente: https://superuser.com/questions/624709/linux-execute-given-command-when-file-directory-changes</p> <p>Eso verifica cada cambio de archivo dentro de ese directorio.</p> <p>Peque\u00f1a explicaci\u00f3n: watch -gsale con el c\u00f3digo de estado 0 cuando encuentra un cambio en la salida del comando. Cuando sale, ejecuta los siguientes comandos vinculados con expresiones de shell condicionales (pueden ser tantos como desee). Luego simplemente repites eso para siempre hasta que golpeas Control-C(para eso est\u00e1 trap exit SIGQUIT SIGINT).</p> <p>Por supuesto, le gustar\u00eda modificar un poco este script, como -n2el intervalo de tiempo para las actualizaciones. Cuanto m\u00e1s lo actualice, m\u00e1s recursos gastar\u00e1.</p> <p>Para archivos individuales, recomendar\u00eda usar el ls -l --time-format=+%s /path/to/file /path/to/another_filecomando, ya que verifica las fechas de modificaci\u00f3n e incluso los cambios de permisos y propiedad.</p> <p>Seguramente existe un m\u00e9todo mejor y m\u00e1s optimizado para hacer esto, pero este enfoque funciona y definitivamente consume menos recursos que Guard. Ahora, todo depende de la escalabilidad. Si va a enumerar recursivamente todos los archivos con todos sus atributos cada milisegundo, seguramente consumir\u00e1 m\u00e1s, pero definitivamente no necesita eso. Simplemente establezca un intervalo m\u00e1s grande, digamos 2 segundos como el anterior, tal vez 10 o 30 si su proyecto no cambia tanto y no le importa esperar un tiempo para que se active el comando. Y en mi opini\u00f3n, este enfoque es bastante bonito y sencillo.</p>"},{"location":"Tron/1-LEGOS/Bash/notificar%20cambios%20archivos/notificar-cambios/#ejemplo-2-con-un-ciclo-y-stat","title":"Ejemplo 2 con un Ciclo y stat.","text":"<p>Fuente: https://superuser.com/questions/181517/how-to-execute-a-command-whenever-a-file-changes</p> <pre><code>#!/bin/bash\n\n### Set initial time of file\nLTIME=`stat -c %Z /path/to/the/file.txt`\n\nwhile true    do\nATIME=`stat -c %Z /path/to/the/file.txt`\n\nif [[ \"$ATIME\" != \"$LTIME\" ]]\nthen    echo \"RUN COMMAND\"\nLTIME=$ATIME\nfi\nsleep 5\ndone\n</code></pre>"},{"location":"Tron/programas/heuristic/Leeme/","title":"Dise\u00f1o del programa de heur\u00edstica:","text":""},{"location":"Tron/programas/heuristic/Leeme/#disponible-aqui","title":"Disponible aqu\u00ed","text":""},{"location":"Tron/programas/heuristic/Leeme/#ayudantes","title":"Ayudantes:","text":""},{"location":"Tron/programas/heuristic/Leeme/#pydoc-shdoc-mkdocs","title":"pydoc shdoc mkdocs","text":"<p>ver documentaci\u00f3n shdoc </p>"},{"location":"Tron/programas/heuristic/Leeme/#estructura-de-carpetas","title":"Estructura de Carpetas","text":"<p>1.La forma m\u00e1s eficiente de realizar una documentaci\u00f3n, para ti mismo como programador he investigador es en el mismo instante en que programas o investigas, como usuario es diferente porque los manuales te llevan paso a paso por las caracter\u00edsticas principales de uso, pero no son \u00fatiles para el hack.</p> <p>Hack en este contexto es modificar los programas para que se adapten a tus necesidades, es decir programar con lo que ya has hecho o con lo que otro ha creado.</p>"},{"location":"Tron/programas/heuristic/Leeme/#posicion-de-carpetas","title":"Posici\u00f3n de Carpetas:","text":"<p>Las carpetas de ayuda de cada programa pueden estar en un lugar central en un servidor web, pero cuando se programa,  la ayuda se coloca dentro del c\u00f3digo, entonces: 1. \u00bfC\u00f3mo ubicamos f\u00edsicamente la ayuda? para responder esta pregunta hay que saber: 2. \u00bfCu\u00e1l es la lista de caracter\u00edsticas relacionadas de las herramientas encontradas? , herramientas como mkdocs, pydoc...  con estas ventajas y la necesidad:( 3. \u00bfQu\u00e9 necesito en cada situaci\u00f3n para que la informaci\u00f3n est\u00e9 r\u00e1pidamente accesible?) ; se toma una decisi\u00f3n de ubicaci\u00f3n de archivos de ayuda.</p>"},{"location":"Tron/programas/heuristic/Leeme/#2-lista-de-caracteristicas-de-las-herramientas","title":"2. Lista de Caracter\u00edsticas de las herramientas.","text":""},{"location":"Tron/programas/heuristic/Leeme/#pydoc","title":"Pydoc:","text":"<p><pre><code>python3 -m pydoc -w programa.py\n</code></pre> Es el comando utilizado para generar html en la carpeta del .py entonces hay que configurar una plantilla snippet en cada editor de c\u00f3digo (code y micro) para que contenga el encabezado est\u00e1ndar del programa a documentar este es un ejemplo de plantilla:</p> <p><pre><code>\"\"\"T\u00edtulo del m\u00f3dulo o del Programa\n\nFuncionalidad del programa, entradas y salidas del programa.\n\nDescripci\u00f3n de dependencias si las tiene\n\nFunciones si se importa como m\u00f3dulo:\n(tambi\u00e9n pueden ser funciones a secas)\n\n    * get_spreadsheet_cols - devuelve los encabezados de columna del archivo\n    * main - la funci\u00f3n principal del script\n\"\"\"\n\n(ac\u00e1 el programa, las importaciones)\n\ndef definiendo la primera clase(Par\u00e1metros):\n\n\"\"\"Que hace la clase...\n\n    Parameters\n    ----------\n    Parametros : clase o tipo\n\n        Descripci\u00f3n del par\u00e1metro...\n\n    Returns\n    -------\n    list\n        Descripci\u00f3n de la salida o retorno\n    \"\"\"\n\n\n\ndef main():\n\ndefiniciones del main...\nif __name__ == \"__main__\":\n    main()\n</code></pre> clic aqu\u00ed para ver el ejemplo completo</p>"},{"location":"Tron/programas/heuristic/Leeme/#shdoc","title":"shdoc:","text":"<p>ver documentaci\u00f3n shdoc</p> <pre><code> shdoc &lt; mi-shell-script.sh &gt; doumento.md\n</code></pre> <p>Con shdoc tambi\u00e9n hay que configurar una plantilla, para los editores</p> <p>La plantilla sugerida para shdoc es: <pre><code>#!/bin/bash\n# @file libexample\n# @brief A library that solves some common problems.\n# @description\n#     The project solves lots of problems:\n#      * a\n#      * b\n#      * c\n#      * etc\n\n# @description My super function.\n# Not thread-safe.\n#\n# @example\n#    echo \"test: $(say-hello World)\"\n#\n# @arg $1 string A value to print\n#\n# @stdout Output 'Hello $1'.\n#   It hopes you say Hello back.\n# @stderr Output 'Oups !' on error.\n#   It did it again.\n#\n# @exitcode 0 If successful.\n# @exitcode 1 If an empty string passed.\n#\n# @see validate()\n# @see Documentation generated using [shdoc](https://github.com/reconquest/shdoc).\n</code></pre></p>"},{"location":"Tron/programas/heuristic/Leeme/#pydoc_1","title":"pydoc:","text":"<p>Pydoc se ejecuta con un comando de bash y su salida es un documento html, o una pagina web en un servidor</p>"},{"location":"Tron/programas/heuristic/Leeme/#shdoc_1","title":"shdoc:","text":"<p>Se ejecuta como bash tambi\u00e9n y su salida un documento markdown (.md)</p>"},{"location":"Tron/programas/heuristic/Leeme/#mkdocs","title":"Mkdocs:","text":"<p>Mkdocs acepta metadatos como \u00e9stos para formar los t\u00edtulos de las p\u00e1ginas</p>"},{"location":"Tron/programas/heuristic/Leeme/#metadatos-de-estilo-yaml","title":"Metadatos de estilo YAML:","text":"<p>Los metadatos de estilo YAML consisten en pares clave/valor YAML envueltos en delimitadores de estilo YAML para marcar el inicio o el final de los metadatos. La primera l\u00ednea de un documento debe ser ---. Los metadatos terminan en la primera l\u00ednea que contiene un delimitador final (ya sea ---o ...). El contenido entre los delimitadores se analiza como YAML . <pre><code>---\ntitle: My Document\nsummary: A brief description of my document.\nauthors:\n- Waylan Limberg\n- Tom Christie\ndate: 2018-07-10\nsome_url: https://example.com\n---\nThis is the first paragraph of the document.\n</code></pre> YAML es capaz de detectar tipos de datos. Por lo tanto, en el ejemplo anterior, los valores de titley summaryson some_urlcadenas, el valor de authorses una lista de cadenas y el valor de datees un datetime.dateobjeto. Tenga en cuenta que las claves YAML distinguen entre may\u00fasculas y min\u00fasculas y MkDocs espera que las claves est\u00e9n en min\u00fasculas. El nivel superior de YAML debe ser una colecci\u00f3n de pares clave/valor, lo que da como resultado que dictse devuelva un Python. Si se devuelve cualquier otro tipo o el analizador YAML encuentra un error, entonces MkDocs no reconoce la secci\u00f3n como metadatos, el metaatributo de la p\u00e1gina estar\u00e1 vac\u00edo y la secci\u00f3n no se eliminar\u00e1 del documento.</p>"},{"location":"Tron/programas/heuristic/Leeme/#mkdocs-material-desing","title":"Mkdocs-Material Desing","text":""},{"location":"Tron/programas/heuristic/Leeme/#documentacion","title":"Documentaci\u00f3n:","text":"<ul> <li>Referencia</li> <li>Extensiones</li> </ul>"},{"location":"Tron/programas/heuristic/Leeme/#metadatos","title":"Metadatos","text":"<p>Para este Mkdocs, hay algunos metadatos: el siguiente metadato se coloca en la entrada para impulsar su b\u00fasqueda:</p> <pre><code>---\nsearch:\nboost: 2 ---\n</code></pre>"},{"location":"Tron/programas/heuristic/Leeme/#vincular-secciones","title":"vincular secciones","text":"<p>Para vincular una p\u00e1gina a una secci\u00f3n, cree un nuevo documento con el nombre index.md en la carpeta respectiva y agr\u00e9guelo al comienzo de su secci\u00f3n de navegaci\u00f3n:</p> <pre><code>nav:\n- Section:\n- section/index.md\n- Page 1: section/page-1.md\n...\n- Page n: section/page-n.md\n</code></pre>"},{"location":"Tron/programas/heuristic/Leeme/#agregar-etiquetas","title":"Agregar Etiquetas:","text":"<p>Cuando el complemento de etiquetas incorporado est\u00e1 habilitado, se pueden agregar etiquetas para un documento con la tagspropiedad de materia preliminar. Agregue las siguientes l\u00edneas en la parte superior de un archivo Markdown:</p> <p><pre><code>--- tags:\n- HTML5\n- JavaScript\n- CSS\n\n---\n</code></pre> La p\u00e1gina ahora se representar\u00e1 con esas etiquetas sobre el t\u00edtulo principal y dentro de la vista previa de b\u00fasqueda, que ahora permite encontrar p\u00e1ginas por etiquetas .</p> <p>\u00bfC\u00f3mo establecer etiquetas para una carpeta completa? Agregar un \u00edndice de etiquetas\u00b6 El complemento de etiquetas incorporado permite definir un archivo para representar un \u00edndice de etiquetas , que puede ser cualquier p\u00e1gina que forme parte de la navsecci\u00f3n. Para agregar un \u00edndice de etiquetas, cree una p\u00e1gina, por ejemplo tags.md:</p> <p><pre><code># Tags\n\nFollowing is a list of relevant tags:\n\n[TAGS]\n</code></pre> El [TAGS]marcador especifica la posici\u00f3n del \u00edndice de etiquetas, es decir, se reemplaza con el \u00edndice de etiquetas real cuando se representa la p\u00e1gina. Puede incluir contenido arbitrario antes y despu\u00e9s del marcador:</p> <p># recordar agregar:</p> <p>tags.md</p>"},{"location":"Tron/programas/heuristic/Leeme/#alinear-imagenes","title":"Alinear Im\u00e1genes","text":"<p>Click aqu\u00ed para ver como Alinear Imagenes</p>"},{"location":"Tron/programas/heuristic/Leeme/#para-colocar-el-sitio-offline","title":"Para Colocar el sitio  Offline:","text":"<p>En la configuraci\u00f3n YAML:</p> <pre><code> plugins:\n- offline\n</code></pre> <p>creo que la ubicaci\u00f3n f\u00edsica en el disco se puede guardar como metadato..?</p>"},{"location":"Tron/programas/heuristic/Leeme/#3-que-necesito-en-cada-situacion-para-que-la-informacion-este-rapidamente-accesible","title":"3. \u00bfQu\u00e9 necesito en cada situaci\u00f3n para que la informaci\u00f3n est\u00e9 r\u00e1pidamente accesible?","text":"<p>Recordemos que contestaremos las preguntas 2 y 3 para contestar la 1.</p> <p>Entonces en cuanto al almacenamiento debe haber una sola Soluci\u00f3n de Biblioteca, as\u00ed que vamos a hacer una prueba de mkdocs, esta prueba consiste en ver como ordena todas las entradas de informaci\u00f3n posibles:</p> <p>Resultados para Mkdocs</p>"},{"location":"Tron/programas/heuristic/Leeme/#entradas-de-informacion","title":"Entradas de Informaci\u00f3n:","text":"<ol> <li> <ul> <li> Video. (De las marcas de los videos)  </li> </ul> </li> <li> <ul> <li> Pdf. De las marcas tambi\u00e9n</li> </ul> </li> <li> <ul> <li> Html.</li> </ul> </li> <li> <ul> <li> Audio.</li> </ul> </li> <li> <ul> <li> Mhtml.(no soporta todos los sitios web y en HTML con monolit)</li> </ul> </li> <li> <ul> <li> Im\u00e1genes (Capturas de tel\u00e9fono o Pantalla).</li> </ul> </li> <li> <ul> <li> Markdown.</li> </ul> </li> <li> <ul> <li> Recortes de c\u00f3digo de copiar y pegar</li> </ul> </li> <li> <ul> <li> Documentaci\u00f3n embebida en el c\u00f3digo fuente. </li> </ul> </li> <li> <ul> <li> Sesiones de Navegador Guardadas (con monolith)</li> <li>(vinculando el nombre de carpeta de una  sesi\u00f3n a un .md particular para tener soporte de sesi\u00f3nWeb)</li> </ul> </li> <li> <ul> <li> Marcadores de Navegador guardados      Exportando los marcadores a html y Raspando la pagina para sacar los marcadores convenientes      Descargando las webs como documentaci\u00f3n.</li> </ul> </li> </ol> <p>Si una Soluci\u00f3n de Biblioteca puede ordenar autom\u00e1ticamente Todos los formatos y realizar b\u00fasquedas con respuestas entendibles dentro del sistema de biblioteca como en contexto de consola, entonces esa soluci\u00f3n es la correcta el \"lugar\" de esa biblioteca ser\u00e1 la respuesta a la pregunta 1. </p> <p>Quitando lo innecesario para la primera fase (Notas b\u00e1sicas de clases) y lo que mkdocs ya cubre, nos queda:</p> <ol> <li> <ul> <li> Video. (De las marcas de los videos)  </li> </ul> </li> <li> <ul> <li> Pdf. De las marcas tambi\u00e9n</li> </ul> </li> </ol> <p>Entonces podemos Hacer un Plan de Realizaci\u00f3n de la App heuristica desde la primera Fase:</p>"},{"location":"Tron/programas/heuristic/Leeme/#plan-de-realizacion-de-la-app-heuristica-clic-aqui","title":"Plan de Realizaci\u00f3n de la App heur\u00edstica Clic aqu\u00ed.","text":""},{"location":"Tron/programas/heuristic/Leeme/#entradas-pre-editadas","title":"Entradas pre-editadas:","text":"<p>Entradas de recortes snipets, res\u00famenes de procedimientos (como configurar...), res\u00famenes de  comandos de programas (VLC command line...) hojas de trucos, peque\u00f1os scripts:</p> <p>Las entradas pre-editadas son recortes de informaci\u00f3n de texto que se utilizar\u00e1n de forma r\u00e1pida, y en contexto: programando, administrando en tiempo real servidores, servicios...</p> <p>Entonces para este tipo de notas se necesita un programa especial que permita guardar y recuperar las notas r\u00e1pidamente pero que tambi\u00e9n de alguna manera se integre a el ecosistema de la biblioteca. Este sistema gestiona informaci\u00f3n del momento por tanto lo llamar\u00e9 chismoso.</p>"},{"location":"Tron/programas/heuristic/Leeme/#chismoso","title":"Chismoso:","text":"<p>Chismoso es el punto final, es la manera de tener la informaci\u00f3n siempre a la mano y de crecer como programador, chismoso almacenar\u00e1 snippets, res\u00famenes, procedimientos y hasta archivos TODO.</p> <p>Para que chismoso funcione debe haber en la biblioteca un sistema de carpetas que refleje la clasificaci\u00f3n de la informaci\u00f3n. Entonces chismoso podr\u00e1 pedir el inicio de cualquier rama e ir preguntando hacia donde ir con un simple ls de bash.</p> <p>Ag permite buscar en determinada carpetas saltando otras, as\u00ed que se puede introducir solo el nombre de la carpeta (o tema) y chismoso ir\u00e1 directamente a ese tema.</p> <p>Creo que lo mejor ser\u00e1 que de ahora en adelante todas las entradas pre-editadas deber\u00e1n crearse en markdown, (al menos con t\u00edtulos \"#\" y llamados \"&gt;\") de esta (para los estudiantes ser\u00e1 el primer curso) de esta manera se garantiza que con un esfuerzo regular, (y al practicar markdown peque\u00f1o), la informaci\u00f3n sea altamente comprensible.</p>"},{"location":"Tron/programas/heuristic/Leeme/#estandar-de-chismoso","title":"Est\u00e1ndar de Chismoso:","text":"<p>Para que la informaci\u00f3n sea recuperable como una base de datos hay que practicar un est\u00e1ndar m\u00ednimo al guardar la informaci\u00f3n:</p> <ul> <li> <p>En lo que respecta a los trozos c\u00f3digo fuente (recortes snipets) debe estar identificado siempre de principio a fin.con un nivel ###### seis(6), al menos. de esta manera si se desea agregar mas clasificaci\u00f3n se har\u00e1 del nivel 5 hasta el 1. al leer el archivo el script de bash usar\u00e1 Ag para extraer el nombre_t\u00edtulo#6 hasta el pr\u00f3ximo t\u00edtulo 6. As\u00ed se recuperar\u00e1 la informaci\u00f3n al vuelo.</p> </li> <li> <p>Todas las entradas tendr\u00e1n una clasificaci\u00f3n que ser\u00e1 registrada, como un tipo: recortes, snippets, resumen de procedimientos (como configurar...), resumen de comandos de programas (VLC command line...) hoja de truco, peque\u00f1os script. son buenas etiquetas para comenzar.</p> </li> <li> <p>El lenguaje, o tema  va primero, despu\u00e9s el tipo y luego el nombre de la entrada pre-editada si alguno de estos elementos tiene varia palabras ir\u00e1 entre comillas.</p> </li> <li> <p>Para terminar la entrada se finalizar\u00e1 con # fin</p> </li> </ul>"},{"location":"Tron/programas/heuristic/Leeme/#ejemplo","title":"Ejemplo:","text":""},{"location":"Tron/programas/heuristic/Leeme/#bash-recorte-if-de-una-linea","title":"# bash recorte  \"if de una linea\".","text":""},{"location":"Tron/programas/heuristic/Leeme/#cuerpo-o-contenido-de-la-entrada","title":"...cuerpo o contenido de la entrada...","text":""},{"location":"Tron/programas/heuristic/Leeme/#fin","title":"# fin","text":""},{"location":"Tron/programas/heuristic/Leeme/#chismoso-diseno","title":"Chismoso Dise\u00f1o:","text":"<ol> <li> <p>Al teclear chismoso, bash mostrar\u00e1 el \u00e1rbol de clasificaciones para poder elegir donde se guardar\u00e1 o si se crear\u00e1 una clasificaci\u00f3n nueva, para eso se puede utilizar br. Buscar en la doc hay un caso de eso.</p> </li> <li> <p>Preguntar\u00e1 sobre las tres cosas fundamentales( Entradas pre-editadas ):</p> <ul> <li>Tipo.</li> <li>Lenguaje, t\u00f3pico o tema.</li> <li>Nombre de la entrada.</li> </ul> </li> <li> <p>Chismoso buscar\u00e1 la entrada, y dar\u00e1 una </p> </li> </ol> <p>recordar tomar la entrada de tipo para colocar la plantilla de entrada salida par\u00e1metros etc si es una clase o funci\u00f3n </p> <ol> <li> <p>Se abrir\u00e1 micro con un archivo auxiliar, para introducir la entrada, este archivo de texto ya contiene el markdown con el encabezado de la entrada y el # fin de la entrada. solo para escribir dentro.</p> <ul> <li>Si es un nuevo archivo se crear\u00e1 </li> </ul> </li> </ol>"},{"location":"Tron/programas/heuristic/Leeme/#solucion-a-como-hacer-entrar-cualquier-texto-rapido-desde-cualquier-parte-chuletas","title":"Soluci\u00f3n a como hacer entrar cualquier texto r\u00e1pido desde cualquier parte (chuletas)","text":"<ul> <li> <p>Si necesito escribir cualquier cosa r\u00e1pido como un elemento de markdown puedo hacer un script de encapsularon, lo que har\u00e1 es presentar opciones comunes en un men\u00fa, con: titulo, lenguaje-t\u00f3pico-tema, y nombre_entrada, como metadatos: como autor, fecha, resumen... y lo maquetar\u00e1 a la manera markdown para MKdocs luego de terminado ubicar\u00e1 el documento markdown en la carpeta correcta de Mkdocs.</p> </li> <li> <p>Si se va a trabajar con un documento de programaci\u00f3n en $programas, se supone que es un programa para producci\u00f3n, entonces cada carpeta programa, de $programas debe estar representada en $biblioteca/docu/programas, cuando se comienza a realizar un script en esta carpeta, ya debe existir por cada documento en la carpeta programas un documento igual en la carpeta /docu/programas de la biblioteca.</p> </li> <li> <p>Los scripts se escriben de forma arbitraria, aqu\u00ed uno de python, Javascript, all\u00e1 sh, pero al crear por primera vez un programa, se har\u00e1 por medio del script para que facilite la carga del tipo de encabezado de acuerdo al tipo de documento. Una vez creado el programa, solo habr\u00e1 que correr otro script, para convertir cada encabezado de programa en markdown y guardarlo en la carpeta correcta.</p> </li> <li> <p>Para que todas las entradas tengan t\u00edtulo legible (por ejemplo home en lugar de index.md) se estandariza que siempre el el programa preguntar\u00e1 por el t\u00edtulo de la entrada, y esta ser\u00e1 tanto el primer t\u00edtulo de primer nivel , como el title metadato del documento markdown. As\u00ed MKdocs lo asignar\u00e1 al nombre de la p\u00e1g, </p> </li> <li> <p>Tambi\u00e9n se puede enviar consultas con partes de un t\u00edtulo con un script, el t\u00edtulo en este archivo, se env\u00eda a Mkdocs, para su b\u00fasqueda con un curl u otra cosa. </p> </li> <li> <p>Se puede buscar de manera interna con el buscador de plata y buscar cualquier palabra dentro de la documentaci\u00f3n  y devolver el nombre del archivo, y as\u00ed introducir este nombre en el buscador de Mkdocs (probar esta opci\u00f3n con calma para ver que ofrece mejores resultados)</p> </li> <li> <p>Si la documentaci\u00f3n se genera como un recorte web, se utiliza la consola para guardar la p\u00e1gina fuente, y dependiendo si lleva c\u00f3digo o no se usa markdown.</p> </li> <li> <p>Si la documentaci\u00f3n se genera de un video, se ejecutar\u00e1 un script que guarde la posici\u00f3n o captura de pantalla del video un video siempre se ve dentro del contexto de un curso, un curso es una carpeta con clases, ya el programa de cursos abre los archivos relacionados con cada clase, y en cada clase, habr\u00e1 una carpeta de pr\u00e1cticas, dentro de ella los apuntes.</p> </li> <li> <p>Como las clases son m\u00e1s susceptibles a ser borradas conforme nos volvemos m\u00e1s diestros en un tema, los apuntes deben conformar otro \u00e1rbol  de carpetas, recomiendo colocar las versiones de los programas para as\u00ed facilitar el borrado cuando estos caduquen, tambi\u00e9n la fecha (para poder borrar entradas viejas de un tema determinado) este \u00e1rbol de apuntes guarda las posiciones (enlaces) de pdf, y de los videos junto con la pagina markdown as\u00ed como los links a los archivos mhtml (los verdaderamente importantes)</p> </li> <li> <p>Cuando se utiliza shdoc ver documentaci\u00f3n shdoc el sistema coloca la plantilla autom\u00e1ticamente antes de comenzar a editar el documento, luego lo convierte en .md, y convertido en .md te pregunta por los dem\u00e1s metadatos para incluirlos con manipulaci\u00f3n de texto antes de sincronizar la documentaci\u00f3n en la biblioteca. </p> </li> </ul> <p>creo que la ubicaci\u00f3n f\u00edsica en el disco se puede guardar como metadato.. si se puede ver: Metadatos de estilo YAML en este documento. * Si se puede guardar la ubicaci\u00f3n f\u00edsica del archivo que gener\u00f3 el markdown como metadato se puede entonces con un script comprobar que archivos existen en la documentaci\u00f3n que no tienen una entrada de programa existente en f\u00edsico en disco. de esta forma se puede eliminar archivos no deseados.</p> <ul> <li>Todos los programas deben hacerse en dentro de la carpeta tron, espec\u00edficamente en la carpeta programas o en la carpeta scripts.</li> </ul> <p>NOTA 2: Hay que tener en cuenta las herramientas que se van anexando o descubriendo, por ejemplo: que m\u00e1s puede hacer el buscador de plata Ag...</p> <p>NOTA 3: Utilizar yaml para registrar las sesionesWeb, md abiertos, documentos de programaci\u00f3n abiertos, pdf abiertos, videos abiertos (y marcadores de videos), ... entradas abiertas y guardarlas en en archivo de sesi\u00f3n recuperable.</p> <p>Nota 4: Buscar la forma que \u00e7 a\u00f1ada p\u00e1rrafos o retornos de carro en markdown.</p> <p>Nota 5: Investigar br (broot) para selecionar carpetas o archivos en un script y as\u00ed utilizarlo en el sistema de sesiones de Nota 3 (ACTUALIZACI\u00d3N): lo encontr\u00e9 en  https://dystroy.org/broot/tricks/#a-generic-fuzzy-finder , tambi\u00e9n ver:  Un buscador difuso gen\u00e9rico en este documento </p> <p>Nota 6: Para Un sistema de sesiones de archivo de terminal se puede crear una variable de entorno fija que vaya registrando (y guardando cada cierto tiempo) la sesi\u00f3n que se est\u00e1 trabajando, as\u00ed la sesi\u00f3n ser\u00e1 migrable e imune a interrupciones, fallas y perdurar\u00e1 en el tiempo. la variable guarda la ubicaci\u00f3n del \u00faltimo yaml utilizado, de esta forma se sabe donde qued\u00f3 el trabajo </p>"},{"location":"Tron/programas/heuristic/Leeme/#herramientas","title":"Herramientas:","text":""},{"location":"Tron/programas/heuristic/Leeme/#el-buscador-de-plata","title":"El buscador de Plata","text":"<p>Para ver el manual del buscador de plata ag haz clic aqu\u00ed</p>"},{"location":"Tron/programas/heuristic/Leeme/#broot","title":"Broot:","text":""},{"location":"Tron/programas/heuristic/Leeme/#un-buscador-difuso-generico","title":"Un buscador difuso gen\u00e9rico:","text":"<p>El objetivo aqu\u00ed es tener una funci\u00f3n que pueda usar en Shell para brindarle una ruta.</p> <p>Paso 1: crea un archivo ~/.config/broot/select.toml con este contenido:</p> <p><pre><code>[[verbs]]\ninvocation = \"ok\"\nkey = \"enter\"\nleave_broot = true\nexecution = \":print_path\"\napply_to = \"file\"\n]\n</code></pre> *Paso 2: crea un atajo de alg\u00fan tipo, por ejemplo usando ~/.bash_aliases</p> <p><pre><code>alias bo=\"br --conf ~/.config/broot/select.toml\"\n</code></pre> Paso 3: luego puede usar broot como selector en otros comandos:</p> <p><pre><code>echo $(bo)\n\n# \u00d3\n\necho $(bo some/path)\n</code></pre> Aqu\u00ed, el archivo de configuraci\u00f3n se us\u00f3 para garantizar que pueda seleccionar un archivo con la tecla Intro. Puede usar el mismo archivo de configuraci\u00f3n para especificar colores para recordar que no est\u00e1 en un broot est\u00e1ndar.</p>"},{"location":"Tron/programas/heuristic/Leeme/#yaml","title":"YAML:","text":"<p>Para procesar Yaml desde la linea de comandos, utilizar\u00e9 yq.</p> <p>*Un tuto Chevere de yq: Procesando YAML en bash con yq</p> <p>*Un tuto Chevere de yq: Procesando YAML en bash con yq</p> <p>*La pagina de github es: https://github.com/mikefarah/yq</p> <p>*La de manual es: https://mikefarah.gitbook.io/yq/</p>"},{"location":"Tron/programas/heuristic/Leeme/#bash","title":"Bash:","text":""},{"location":"Tron/programas/heuristic/Leeme/#encontrar-la-ruta-relativa","title":"Encontrar la ruta relativa:","text":"<pre><code>realpath --relative-to=\"$file1\" \"$file2\"\n</code></pre>"},{"location":"Tron/programas/heuristic/Leeme/#monolith","title":"Monolith","text":""},{"location":"Tron/programas/heuristic/Leeme/#pagina","title":"P\u00e1gina:","text":"<ul> <li>monolith </li> </ul>"},{"location":"Tron/programas/heuristic/Leeme/#comandos","title":"Comandos:","text":"<pre><code>daniel@HungServ:~/tron/plugins/ComprimidosO.deb/chrome-linux$ ./chrome --headless --incognito --dump-dom file:///Ruta-sin-la-primera-barra.mhtml | monolith - -I -b https://github.com -o prueba6.html\n</code></pre>"},{"location":"Tron/programas/heuristic/ejemplos/ejemplo-python/","title":"Ejemplo de Documentaci\u00f3n Python","text":"<pre><code>\"\"\"Impresora de columna de hoja de c\u00e1lculo\n\nEste script permite al usuario imprimir en la consola todas las columnas del\nhoja de c\u00e1lculo. Se supone que la primera fila de la hoja de c\u00e1lculo es la\nUbicaci\u00f3n de las columnas.\n\nEsta herramienta acepta archivos de valores separados por comas (.csv), as\u00ed como Excel\n(.xls, .xlsx) archivos.\n\nEste script requiere que `pandas` est\u00e9 instalado dentro de Python\nentorno en el que est\u00e1 ejecutando este script.\n\nEste archivo tambi\u00e9n se puede importar como un m\u00f3dulo y contiene lo siguiente\nfunciones:\n\n    * get_spreadsheet_cols - devuelve los encabezados de columna del archivo\n    * main - la funci\u00f3n principal del script\n\"\"\"\n\nimport argparse\n\nimport pandas as pd\n\n\ndef get_spreadsheet_cols(file_loc, print_cols=False):\n\n\"\"\"Obtiene e imprime las columnas de encabezado de la hoja de c\u00e1lculo\n\n    Parameters\n    ----------\n    file_loc : str\n\n        La ubicaci\u00f3n del archivo de la hoja de c\u00e1lculo.\n    print_cols : bool, optional\nUn indicador utilizado para imprimir las columnas en la consola (el valor predeterminado es False)\n\n    Returns\n    -------\n    list\n        una lista de cadenas utilizadas que son las columnas de encabezado\n    \"\"\"\n\n    file_data = pd.read_excel(file_loc)\n    col_headers = list(file_data.columns.values)\n\n    if print_cols:\n        print(\"\\n\".join(col_headers))\n\n    return col_headers\n\n\ndef main():\n    parser = argparse.ArgumentParser(description=__doc__)\n    parser.add_argument(\n        'input_file',\n        type=str,\n        help=\"El archivo de hoja de c\u00e1lculo para imprimir las columnas de\"\n    )\n    args = parser.parse_args()\n    get_spreadsheet_cols(args.input_file, print_cols=True)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"Tron/programas/heuristic/manuales/ag/","title":"Manual del Buscador de Plata","text":"<pre><code>Uso: ag [TIPO DE ARCHIVO] [OPCIONES] PATR\u00d3N [RUTA]\n\nBusque recursivamente PATTERN en PATH.\n   Como grep o ack, pero m\u00e1s r\u00e1pido.\n\nEjemplo:\n   ag -i foo /bar/\n\nOpciones de salida:\n      --ackmate Imprimir resultados en formato analizable AckMate\n   -A --after [LINES] Imprime l\u00edneas despu\u00e9s de la coincidencia (Predeterminado: 2)\n-B --before [LINES] Imprime l\u00edneas antes de la coincidencia (Predeterminado: 2)\n--[no]break Imprimir nuevas l\u00edneas entre coincidencias en diferentes archivos\n                           (Habilitado por defecto)\n-c --count S\u00f3lo imprime el n\u00famero de coincidencias en cada archivo.\n                           (Esto a menudo difiere del n\u00famero de l\u00edneas coincidentes)\n--[no]color Imprimir c\u00f3digos de color en los resultados (Habilitado por defecto)\n--color-line-number C\u00f3digos de color para n\u00fameros de l\u00ednea (Predeterminado: 1;33)\n--color-match C\u00f3digos de color para n\u00fameros de coincidencia de resultados (Predeterminado: 30;43)\n--color-path C\u00f3digos de color para nombres de ruta (Predeterminado: 1;32)\n--column Imprimir n\u00fameros de columna en los resultados\n      --[no]filename Imprimir nombres de archivo (Habilitado a menos que busque un solo archivo)\n-H --[no]heading Imprime los nombres de archivo antes de las coincidencias de cada archivo\n                           (Habilitado por defecto)\n-C --context [LINES] Imprime l\u00edneas antes y despu\u00e9s de las coincidencias (Predeterminado: 2)\n--[no]group Igual que --[no]break --[no]heading\n   -g --filename-pattern PATR\u00d3N\n                           Imprimir nombres de archivo que coincidan con PATR\u00d3N\n   -l --files-with-matches Solo imprime los nombres de archivo que contienen coincidencias\n                           (no imprima las l\u00edneas coincidentes)\n-L --archivos-sin-coincidencias\n                           Imprima solo nombres de archivo que no contengan coincidencias\n      --print-all-files Imprime encabezados para todos los archivos buscados, incluso aquellos que\n                           no contiene coincidencias\n      --[no]numbers Imprimir n\u00fameros de l\u00ednea. El valor predeterminado es omitir los n\u00fameros de l\u00ednea\n                           al buscar transmisiones\n   -o --only-matching Imprime solo la parte coincidente de las l\u00edneas\n      --print-long-lines Imprime coincidencias en l\u00edneas muy largas (Predeterminado: &gt;2k caracteres)\n--passthrough Al buscar un flujo, imprime todas las l\u00edneas incluso si\n                           no coinciden\n      --silent Suprimir todos los mensajes de registro, incluidos los errores\n      --stats Imprimir estad\u00edsticas (archivos escaneados, tiempo empleado, etc.)\n--stats-only Imprime estad\u00edsticas y nada m\u00e1s.\n                           (Igual que --count al buscar en un solo archivo)\n--vimgrep Imprime resultados como los de vim :vimgrep /pattern/g\n                           (informa cada coincidencia en la l\u00ednea)\n-0 --null --print0 Nombres de archivo separados con nulo (para 'xargs -0')\n\nOpciones de b\u00fasqueda:\n   -a --all-types Buscar todos los archivos (no incluye archivos ocultos)\no patrones de archivos ignorados)\n-D --debug Depuraci\u00f3n rid\u00edcula (probablemente no \u00fatil)\n--depth NUM Buscar hasta NUM directorios de profundidad (Predeterminado: 25)\n-f --follow Seguir enlaces simb\u00f3licos\n   -F --fixed-strings Alias para --literal para compatibilidad con grep\n   -G --file-search-regex PATR\u00d3N Limita la b\u00fasqueda a nombres de archivo que coincidan con PATR\u00d3N\n      --hidden Buscar archivos ocultos (obedece a .*ignorar archivos)\n-i --ignore-case Coincide con may\u00fasculas y min\u00fasculas de forma insensible\n      --ignore PATR\u00d3N Ignora archivos/directorios que coincidan con PATR\u00d3N\n                           (tambi\u00e9n se permiten nombres de archivos/directorios literales)\n--ignore-dir NOMBRE Alias para --ignore para compatibilidad con ack.\n   -m --max-count NUM Omite el resto de un archivo despu\u00e9s de NUM coincidencias (Predeterminado: 10,000)\n--one-device No siga enlaces a otros dispositivos.\n   -p --path-to-ignore STRING\n                           Usa el archivo .ignore en STRING\n   -Q --literal No analiza PATR\u00d3N como una expresi\u00f3n regular\n  -s --case-sensitive  Coincide con may\u00fasculas y min\u00fasculas\n   -S --smart-case Coincide con may\u00fasculas y min\u00fasculas a menos que PATTERN contenga\n                           caracteres en may\u00fascula (Habilitado por defecto)\n--search-binary Buscar coincidencias en archivos binarios\n   -t --all-text Busca todos los archivos de texto (no incluye archivos ocultos)\n-u --unrestricted Buscar todos los archivos (ignorar .ignorar, .gitignore, etc.;\nbusca archivos binarios y ocultos tambi\u00e9n)\n-U --skip-vcs-ignores Ignorar VCS ignorar archivos\n                           (.gitignore, .hgignore; todav\u00eda obedecer .ignore)\n-v --invert-match invertir coincidencia\n   -w --word-regexp Coincide solo con palabras completas\n   -W --width NUM Truncar l\u00edneas de coincidencia despu\u00e9s de NUM caracteres\n   -z --search-zip Busca contenido de archivos comprimidos (p. ej., gzip)\n\nTipos de archivo:\nLa b\u00fasqueda se puede restringir a ciertos tipos de archivos. Ejemplo:\n   ag --html aguja\n   - Busca 'aguja' en archivos con sufijo .htm, .html, .shtml o .xhtml.\n\nPara obtener una lista de los tipos de archivos admitidos, ejecute:\n   ag --list-file-types\n\nag fue creado originalmente por Geoff Greer. M\u00e1s informaci\u00f3n (y el \u00faltimo lanzamiento)\nse puede encontrar en http://geoff.greer.fm/ag\n</code></pre>"},{"location":"Tron/programas/heuristic/manuales/shdoc/","title":"shdoc","text":"<p>shdoc es un generador de documentaci\u00f3n para bash/zsh/sh para generar documentaci\u00f3n API en Markdown a partir de  la fuente de scripts de shell. </p> <p>shdoc analiza anotaciones al principio de un archivo determinado y junto con las  definiciones de funciones, y crea un archivo de descuento con documentaci\u00f3n lista para usar. </p>"},{"location":"Tron/programas/heuristic/manuales/shdoc/#indice","title":"\u00cdndice","text":"<ul> <li>Ejemplo </li> <li>Anotaciones </li> <li>Uso </li> <li>Instalaci\u00f3n </li> <li>M\u00e1s ejemplos </li> <li>Licencia </li> </ul>"},{"location":"Tron/programas/heuristic/manuales/shdoc/#ejemplo","title":"Ejemplo","text":"Genere documentaci\u00f3n con el siguiente comando:  <pre><code>$ shdoc &lt; lib.sh &gt; doc.md </code></pre>  _Source_ [examples/readme-example.sh](examples/readme-example.sh)  _Output_: [examples/readme-example.md](examples/ readme-example.md) <pre><code>#!/bin/bash \n# @file libexample \n# @brief Una biblioteca que resuelve algunos problemas comunes. \n# @description \n# El proyecto resuelve muchos problemas: \n# * a \n# * b \n# * c \n# * etc \n\n# @description Mi s\u00faper funci\u00f3n. \n# No es seguro para subprocesos. \n# \n# @example \n# echo \"test: $(say-hello World)\" \n# \n# @arg $1 cadena Un valor para imprimir \n# \n# @exitcode 0 Si tiene \u00e9xito.\n# @exitcode 1 Si pasa una cadena vac\u00eda. \n# \n# @ver validar() \nsaludar() { si [[ ! \"$1\" ]]; luego devuelve 1; fi echo \"Hola $1\" } </code></pre> <pre><code># libexample \n\nUna biblioteca que resuelve algunos problemas comunes. \n\n## Descripci\u00f3n general \n\nEl proyecto resuelve muchos problemas: \n* a \n* b \n* c \n* etc. \n\n## \u00cdndice \n\n* [saluda](#saluda) \n\n### saluda \n\nMi s\u00faper funci\u00f3n. \nNo es seguro para subprocesos. \n\n#### Ejemplo \n\n```bash \necho \"test: $(say-hello World)\" \n``` \n\n#### Argumentos\n\n* **$1** (cadena): Un valor para imprimir \n\n#### C\u00f3digos de salida \n\n* **0**: Si tiene \u00e9xito. \n* **1**: si pasa una cadena vac\u00eda. \n\n#### Ver tambi\u00e9n \n\n* [validate()](#validate) \n</code></pre>"},{"location":"Tron/programas/heuristic/manuales/shdoc/#caracteristicas","title":"Caracter\u00edsticas","text":""},{"location":"Tron/programas/heuristic/manuales/shdoc/#name","title":"<code>@name</code>","text":"<p>Un nombre del proyecto, usado como t\u00edtulo del doc. Se puede especificar una vez al principio del  archivo. </p> <p>Ejemplo </p> <pre><code>#!/bin/bash \n# @name MyLibrary \n</code></pre>"},{"location":"Tron/programas/heuristic/manuales/shdoc/#file","title":"<code>@file</code>","text":"<p>Id\u00e9ntico a @name. </p>"},{"location":"Tron/programas/heuristic/manuales/shdoc/#brief","title":"<code>@brief</code>","text":"<p>Una breve l\u00ednea sobre el proyecto. Se puede especificar una vez al principio del archivo. </p> <p>Ejemplo <pre><code>#!/bin/bash\n# @brief Una biblioteca para resolver algunos problemas. \n</code></pre></p>"},{"location":"Tron/programas/heuristic/manuales/shdoc/#description","title":"<code>@description</code>","text":"<p>Una descripci\u00f3n de varias l\u00edneas del proyecto/secci\u00f3n/funci\u00f3n.  * Se puede especificar una vez para todo el archivo al principio del archivo.  * Se puede especificar una vez para una secci\u00f3n del archivo. Ver @secci\u00f3n.  * Se puede especificar una vez encima de una definici\u00f3n de funci\u00f3n. </p> <p>Ejemplo <pre><code>#!/bin/bash \n# @description Una descripci\u00f3n larga de la biblioteca. \n# Segunda l\u00ednea de la descripci\u00f3n del proyecto. \n\n# @description Mi s\u00faper funci\u00f3n. \n# Segunda l\u00ednea de la descripci\u00f3n de mi s\u00faper funci\u00f3n. \nfunci\u00f3n super() { ... } </code></pre></p>"},{"location":"Tron/programas/heuristic/manuales/shdoc/#seccion","title":"<code>@secci\u00f3n</code>","text":"<p>El nombre de una secci\u00f3n del archivo. Se puede utilizar para agrupar funciones. </p> <p>Ejemplo <pre><code># @section Funciones de mis utilidades \n# @description Las siguientes funciones se pueden usar para resolver problemas. \n</code></pre></p>"},{"location":"Tron/programas/heuristic/manuales/shdoc/#example","title":"<code>@example</code>","text":"<p>Un ejemplo de varias l\u00edneas del uso de la funci\u00f3n. Solo se puede especificar junto con la definici\u00f3n de la funci\u00f3n. </p> <p>Ejemplo <pre><code># @ejemplo \n# echo \"test: $(say-hello World)\" \nsay-hello() { ... } </code></pre></p>"},{"location":"Tron/programas/heuristic/manuales/shdoc/#arg","title":"<code>@arg</code>","text":"<p>Una descripci\u00f3n de un argumento se espera que se pase al llamar a la funci\u00f3n.  Se puede especificar varias veces para describir cualquier n\u00famero de argumentos. </p> <p>Ejemplo <pre><code># @description Saluda a una persona determinada. \n# @arg $1 cadena El nombre de una persona. \n# @arg $2 string Prioridad del mensaje. \nsay-hello() { ... } </code></pre></p>"},{"location":"Tron/programas/heuristic/manuales/shdoc/#noargs","title":"<code>@noargs</code>","text":"<p>Una nota de que la funci\u00f3n no espera que se pase ning\u00fan argumento. </p> <p>Ejemplo <pre><code># @description Dice 'hola mundo'. \n# @noargs \nsay-hello-world() { ... } </code></pre></p>"},{"location":"Tron/programas/heuristic/manuales/shdoc/#set","title":"<code>@set</code>","text":"<p>Una descripci\u00f3n de una variable global que se establece al llamar a la funci\u00f3n.  Se puede especificar varias veces para describir cualquier n\u00famero de variables </p> <p>Ejemplo <pre><code># @description Establece hola en la variable RESPONDER\n# @set REPLY string Mensaje de saludo. \nset-hello() { ... } </code></pre></p>"},{"location":"Tron/programas/heuristic/manuales/shdoc/#exitcode","title":"<code>@exitcode</code>","text":"<p>Describe un c\u00f3digo de salida esperado de la funci\u00f3n.  Se puede especificar varias veces para describir todos los c\u00f3digos de salida posibles y sus condiciones. </p> <p>Ejemplo <pre><code># @description Dice 'hola mundo'. \n# @exitcode 0 Si tiene \u00e9xito. \n# @exitcode 1 Si el mundo se ha ido. \nsay-hello-world() { ... } </code></pre></p>"},{"location":"Tron/programas/heuristic/manuales/shdoc/#stdin","title":"<code>@stdin</code>","text":"<p>La entrada esperada para la llamada de funci\u00f3n desde <code>stdin</code> (generalmente la terminal o la l\u00ednea de comando) </p> <p>Ejemplo <pre><code># @description Pregunta el nombre.\n# @stdin El nombre de usuario del terminal/l\u00ednea de comando. \nsay-hello-world() { ... } </code></pre></p>"},{"location":"Tron/programas/heuristic/manuales/shdoc/#stdout","title":"<code>@stdout</code>","text":"<p>Una salida esperada de la llamada a la funci\u00f3n. </p> <p>Ejemplo <pre><code># @description Dice 'hola mundo'. \n# @stdout Una ruta a un archivo temporal con el mensaje. \nsay-hello-world() { ... } </code></pre></p>"},{"location":"Tron/programas/heuristic/manuales/shdoc/#stderr","title":"<code>@stderr</code>","text":"<p>Una salida esperada de la llamada de funci\u00f3n en <code>/dev/stderr</code>. </p> <p>Ejemplo <pre><code># @description Dice 'hola mundo'. \n# @stderr Un mensaje de error cuando el mundo no est\u00e1 disponible. \ndecir-hola-mundo() { ... } </code></pre></p>"},{"location":"Tron/programas/heuristic/manuales/shdoc/#ver","title":"<code>@ver</code>","text":"<p>Cree un enlace en la funci\u00f3n dada en la secci\u00f3n \"Ver tambi\u00e9n\". </p> <p>Ejemplo <pre><code># @see say-hello \n# @see text with [markdown link](./other-file#other-function) \nsay-hello-world() { ... } </code></pre></p>"},{"location":"Tron/programas/heuristic/manuales/shdoc/#internal","title":"<code>@internal</code>","text":"<p>Cuando desee omitir la generaci\u00f3n de documentaci\u00f3n para una funci\u00f3n en particular, puede especificar esta  etiqueta <code>@internal</code>.  Le permite tener el mismo estilo de comentarios de documentos en todo el script y mantener las  funciones internas ocultas para los usuarios. </p> <p>Ejemplo <pre><code># @internal \nshow-msg() { ... } </code></pre></p>"},{"location":"Tron/programas/heuristic/manuales/shdoc/#uso","title":"Uso","text":"<p>shdoc no tiene argumentos y espera un script de shell con comentarios en stdin y producir\u00e1 una reducci\u00f3n como stdout. </p> <pre><code>$ shdoc &lt; your-shell-script.sh &gt; doc.md </code></pre>"},{"location":"Tron/programas/heuristic/manuales/shdoc/#instalacion","title":"Instalaci\u00f3n","text":""},{"location":"Tron/programas/heuristic/manuales/shdoc/#arch-linux","title":"Arch Linux","text":"<p>Los usuarios de Arch Linux pueden instalar shdoc usando el paquete en AUR: shdoc-git </p>"},{"location":"Tron/programas/heuristic/manuales/shdoc/#usando-git","title":"Usando Git","text":"<p>NOTA: shdoc requiere gawk: <code>apt-get install gawk</code> </p> <pre><code>git clone --recursive https://github.com/reconquest/shdoc cd shdoc \nsudo make install </code></pre>"},{"location":"Tron/programas/heuristic/manuales/shdoc/#otros","title":"Otros","text":"<p>Desafortunadamente, no hay paquetes de shdoc para otras distribuciones, pero estamos buscando contribuciones. </p>"},{"location":"Tron/programas/heuristic/manuales/shdoc/#ejemplos","title":"Ejemplos","text":"<p>Consulte la documentaci\u00f3n de ejemplo en:</p> <ul> <li>pruebas.sh </li> <li>coproc.bash </li> </ul>"},{"location":"Tron/programas/heuristic/manuales/shdoc/#licencia","title":"LICENCIA","text":"<p>MIT</p>"},{"location":"Tron/programas/heuristic/proyecto/fase1/","title":"Plan de Realizaci\u00f3n de la App heur\u00edstica:","text":"<ol> <li> <ul> <li> Video. (De las marcas de los videos) Investigaci\u00f3n Adelantada</li> </ul> </li> <li> <ul> <li> Recortes de c\u00f3digo de copiar y pegar</li> </ul> </li> <li> <ul> <li> Documentaci\u00f3n embebida en el c\u00f3digo fuente. </li> </ul> </li> <li> <ul> <li> HTML descargas de sitios (no soporta todas las web: con monolit)</li> </ul> </li> <li> <ul> <li> Sesiones de Navegador Guardadas (con monolith)</li> <li>(vinculando el nombre de carpeta de una  sesi\u00f3n a un .md particular para tener soporte de sesi\u00f3nWeb)</li> </ul> </li> </ol>"},{"location":"Tron/programas/heuristic/proyecto/fase1/#segunda-fase","title":"Segunda Fase:","text":"<ol> <li> <ul> <li> Vinculaci\u00f3n de marcas de pdf </li> </ul> </li> <li> <ul> <li> Marcadores de Navegador guardados </li> <li>Exportando los marcadores a html y Raspando la pagina para sacar los marcadores convenientes  Descargando las webs como documentaci\u00f3n</li> </ul> </li> </ol>"},{"location":"Tron/programas/heuristic/proyecto/fase1/#tercera-fase","title":"Tercera Fase:","text":"<ol> <li> <ul> <li> Dise\u00f1o de Interfaces.</li> </ul> </li> <li> <ul> <li> Revisi\u00f3n de la biblioteca dise\u00f1o de los primeros cursos:</li> <li>Elecci\u00f3n de los temas.</li> <li>Programaci\u00f3n Pedag\u00f3gica - did\u00e1ctica (Guiones, etc).</li> </ul> </li> </ol>"},{"location":"Tron/programas/heuristic/proyecto/fase1/#cuarta-fase","title":"Cuarta Fase:","text":"<ol> <li> <ul> <li> Dise\u00f1o de Interfaces</li> </ul> </li> <li> <ul> <li> Sistemas de Pago- Plataformas de pago.</li> </ul> </li> </ol>"},{"location":"Tron/programas/heuristic/proyecto/fase1/#quinta-fase","title":"Quinta Fase:","text":"<ol> <li> <ul> <li> Marketing.</li> </ul> </li> <li> <ul> <li> Redes Sociales.</li> </ul> </li> <li> <ul> <li> Bots.</li> </ul> </li> <li> <ul> <li> Historias Videos-</li> </ul> </li> <li> <ul> <li> Publicidad Paga.</li> </ul> </li> </ol>"}]}